{"meta":{"version":1,"warehouse":"1.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0},{"_id":"themes/tenfour/source/js/script.js","path":"js/script.js","modified":0},{"_id":"themes/tenfour/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":0},{"_id":"themes/tenfour/source/favicon.png","path":"favicon.png","modified":0},{"_id":"themes/tenfour/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0},{"_id":"themes/tenfour/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0},{"_id":"themes/tenfour/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0},{"_id":"themes/tenfour/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0},{"_id":"themes/tenfour/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0},{"_id":"themes/tenfour/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0},{"_id":"themes/tenfour/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0},{"_id":"themes/tenfour/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0},{"_id":"themes/tenfour/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0},{"_id":"themes/tenfour/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0},{"_id":"themes/tenfour/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0},{"_id":"themes/tenfour/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0},{"_id":"themes/tenfour/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0},{"_id":"themes/tenfour/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0},{"_id":"themes/tenfour/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0},{"_id":"themes/tenfour/source/css/style.styl","path":"css/style.styl","modified":0},{"_id":"themes/tenfour/source/css/images/banner.png","path":"css/images/banner.png","modified":0},{"_id":"themes/tenfour/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0},{"_id":"themes/tenfour/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0},{"_id":"themes/tenfour/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0},{"_id":"themes/tenfour/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0},{"_id":"themes/tenfour/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0}],"Cache":[{"_id":"source/CNAME","shasum":"45ae701d6392c3a64325828f8462d3b1ddd96d3f","modified":1439000616000},{"_id":"source/_posts/css-ie-rgba.md","shasum":"b90ab0190a0e263d855d19490f1aeb774bafc4ff","modified":1439017133000},{"_id":"source/_posts/front-end-browser-render.md","shasum":"8739611ad58ca3accde9aaf91ca67e7eed3b42a4","modified":1439627050000},{"_id":"source/_posts/html-hashtag.md","shasum":"99c22d4870f82df22a8849faf75803285073a78b","modified":1439019646000},{"_id":"source/_posts/js-art-topic.md","shasum":"e6246b39599ca7eb871e2e8e5f081c625215512b","modified":1439381918000},{"_id":"source/_posts/js-bit-operation.md","shasum":"f9f096fc45194e4c03bb302f5fec6ac3db9e0a7c","modified":1439379574000},{"_id":"source/_posts/js-data-type.md","shasum":"55280a12240a2f2015639676de3be2eec8002cbe","modified":1439435045000},{"_id":"source/_posts/js-event-delegate.md","shasum":"8f8dd201ba94e79c5d7db2a4d3c5782301f22791","modified":1439017146000},{"_id":"source/_posts/js-or-and-operator.md","shasum":"ee27f3e3cd4f546e34f66e38d5be6f28aab7ed9f","modified":1439017153000},{"_id":"source/search/index.md","shasum":"d77ae3838c7a6d21a3d3c2fb30ccc47f1ed57629","modified":1439963012000},{"_id":"themes/tenfour/Gruntfile.js","shasum":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1438766831000},{"_id":"themes/tenfour/LICENSE","shasum":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1438766831000},{"_id":"themes/tenfour/README.md","shasum":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1438766831000},{"_id":"themes/tenfour/_config.yml","shasum":"ff11cadc9c4098bb010696947ac448c012c86195","modified":1439962369000},{"_id":"themes/tenfour/layout/_partial/after-footer.ejs","shasum":"c08a5efd44a88995a9d618a2143a5de0e04d4f8a","modified":1438960893000},{"_id":"themes/tenfour/layout/_partial/archive-post.ejs","shasum":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1438766831000},{"_id":"themes/tenfour/layout/_partial/archive.ejs","shasum":"d7de6421497ffaf65e4f5fe4bed71fcea51fde80","modified":1438766831000},{"_id":"themes/tenfour/layout/_partial/article.ejs","shasum":"29998a2cd9229c121bdec24c05bd54003c1d3c7c","modified":1439908227000},{"_id":"themes/tenfour/layout/_partial/footer.ejs","shasum":"1d13521dcae2fa97dd226bc64c07a9bd78fd4abe","modified":1439963153000},{"_id":"themes/tenfour/layout/_partial/google-analytics.ejs","shasum":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1438766831000},{"_id":"themes/tenfour/layout/_partial/head.ejs","shasum":"635cfa297f267fa510313448752fc8c4916e5e36","modified":1439004216000},{"_id":"themes/tenfour/layout/_partial/header.ejs","shasum":"46a52cc066dfea8d64040dffbc9c6295142b0711","modified":1439963943000},{"_id":"themes/tenfour/layout/_partial/mobile-nav.ejs","shasum":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1438766831000},{"_id":"themes/tenfour/layout/_partial/page.ejs","shasum":"d89e501cd842c0607aa6115fe034b617cd0aa546","modified":1439908294000},{"_id":"themes/tenfour/layout/_partial/post/category.ejs","shasum":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1439257056000},{"_id":"themes/tenfour/layout/_partial/post/date.ejs","shasum":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1438766831000},{"_id":"themes/tenfour/layout/_partial/post/gallery.ejs","shasum":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1438766831000},{"_id":"themes/tenfour/layout/_partial/post/nav.ejs","shasum":"7c46491ac29294689e47aaaf29240addf6927fd7","modified":1439015599000},{"_id":"themes/tenfour/layout/_partial/post/tag.ejs","shasum":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1439256942000},{"_id":"themes/tenfour/layout/_partial/post/title.ejs","shasum":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1439089122000},{"_id":"themes/tenfour/layout/_partial/sidebar.ejs","shasum":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1438766831000},{"_id":"themes/tenfour/layout/_widget/archive.ejs","shasum":"6e584313ceb8a1599ec320588e9ce203ca35dcc4","modified":1439016854000},{"_id":"themes/tenfour/layout/_widget/category.ejs","shasum":"59baefd4b9242a941c32a0b553d8a9591acb3fbc","modified":1439016798000},{"_id":"themes/tenfour/layout/_widget/links.ejs","shasum":"fc0f460688841b85b16d0756d14a74c11616021d","modified":1439530059000},{"_id":"themes/tenfour/layout/_widget/tag.ejs","shasum":"1ae755002b2aaab71c5885d64fe7885f0d66e21a","modified":1439015395000},{"_id":"themes/tenfour/layout/_widget/recent_posts.ejs","shasum":"a10d28fddb8365342882ea4ee2660a3947278735","modified":1439016816000},{"_id":"themes/tenfour/layout/_widget/tagcloud.ejs","shasum":"3f431b2a42d1e850ce2089ffdb97efa66f92c398","modified":1439016824000},{"_id":"themes/tenfour/layout/_widget/tenfour.ejs","shasum":"a4f8ad14967185ef5f0edb2cf4c9b73f276d5a7e","modified":1439016829000},{"_id":"themes/tenfour/layout/archive.ejs","shasum":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1438766831000},{"_id":"themes/tenfour/layout/category.ejs","shasum":"765426a9c8236828dc34759e604cc2c52292835a","modified":1438766831000},{"_id":"themes/tenfour/layout/index.ejs","shasum":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1438766831000},{"_id":"themes/tenfour/layout/layout.ejs","shasum":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1438766831000},{"_id":"themes/tenfour/layout/page.ejs","shasum":"b638d94c1c160556c96631f9fb5a526064c4bb30","modified":1439908274000},{"_id":"themes/tenfour/layout/post.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1438766831000},{"_id":"themes/tenfour/layout/tag.ejs","shasum":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1438766831000},{"_id":"themes/tenfour/package.json","shasum":"85358dc34311c6662e841584e206a4679183943f","modified":1438766831000},{"_id":"themes/tenfour/scripts/fancybox.js","shasum":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1438766831000},{"_id":"themes/tenfour/source/css/_extend.styl","shasum":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1438766831000},{"_id":"themes/tenfour/source/css/_partial/archive.styl","shasum":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1438766831000},{"_id":"themes/tenfour/source/css/_partial/article.styl","shasum":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1438766831000},{"_id":"themes/tenfour/source/css/_partial/comment.styl","shasum":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1438766831000},{"_id":"themes/tenfour/source/css/_partial/footer.styl","shasum":"a657b7a13cc6267746d3ee77a17d8903c6c62aac","modified":1439530253000},{"_id":"themes/tenfour/source/css/_partial/header.styl","shasum":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1438766831000},{"_id":"themes/tenfour/source/css/_partial/highlight.styl","shasum":"36eefe6332b86b66023a9884b754d305235846b4","modified":1438766831000},{"_id":"themes/tenfour/source/css/_partial/mobile.styl","shasum":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1438766831000},{"_id":"themes/tenfour/source/css/_partial/sidebar-aside.styl","shasum":"890349df5145abf46ce7712010c89237900b3713","modified":1438766831000},{"_id":"themes/tenfour/source/css/_partial/sidebar-bottom.styl","shasum":"bc5487b9a0bfe5f745423331824d3f3637ccd430","modified":1438766831000},{"_id":"themes/tenfour/source/css/_partial/sidebar.styl","shasum":"fea1ad299b24b2503b50b506fcbc1ba82e07e5ba","modified":1439530088000},{"_id":"themes/tenfour/source/css/_util/grid.styl","shasum":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1438766831000},{"_id":"themes/tenfour/source/css/_util/mixin.styl","shasum":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1438766831000},{"_id":"themes/tenfour/source/css/_variables.styl","shasum":"d654762b69894285f102c3c47d9824e006417a09","modified":1438960029000},{"_id":"themes/tenfour/source/css/fonts/fontawesome-webfont.eot","shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1438766831000},{"_id":"themes/tenfour/source/css/fonts/FontAwesome.otf","shasum":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1438766831000},{"_id":"themes/tenfour/source/css/fonts/fontawesome-webfont.woff","shasum":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1438766831000},{"_id":"themes/tenfour/source/css/style.styl","shasum":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1438766831000},{"_id":"themes/tenfour/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1438766831000},{"_id":"themes/tenfour/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1438766831000},{"_id":"themes/tenfour/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1438766831000},{"_id":"themes/tenfour/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1438766831000},{"_id":"themes/tenfour/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1438766831000},{"_id":"themes/tenfour/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1438766831000},{"_id":"themes/tenfour/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1438766831000},{"_id":"themes/tenfour/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1438766831000},{"_id":"themes/tenfour/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1438766831000},{"_id":"themes/tenfour/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1438766831000},{"_id":"themes/tenfour/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1438766831000},{"_id":"themes/tenfour/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1438766831000},{"_id":"themes/tenfour/source/fancybox/jquery.fancybox.css","shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1438766831000},{"_id":"themes/tenfour/source/favicon.png","shasum":"92c4320ad6ebaee0ae7720e8c9bbf6843e823259","modified":1439200763000},{"_id":"themes/tenfour/source/fancybox/jquery.fancybox.pack.js","shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1438766831000},{"_id":"themes/tenfour/source/fancybox/jquery.fancybox.js","shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1438766831000},{"_id":"themes/tenfour/source/js/script.js","shasum":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1438766831000},{"_id":"themes/tenfour/source/css/fonts/fontawesome-webfont.ttf","shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1438766831000},{"_id":"themes/tenfour/source/js/jquery-2.0.3.min.js","shasum":"a9e46273f3161bc876825ac2792f61f117eb7829","modified":1439015552000},{"_id":"themes/tenfour/source/css/fonts/fontawesome-webfont.svg","shasum":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1438766831000},{"_id":"themes/tenfour/source/css/images/banner.png","shasum":"5e2ceae6eb71b5d921670a7b8d177225a89faf5f","modified":1438959933000},{"_id":"public/search/index.html","modified":1439963950762,"shasum":"bdb7ad5028a6b827415f1e350e997cd0b01f3ca9"},{"_id":"public/2015/08/13/front-end-browser-render/index.html","modified":1439963950778,"shasum":"e139577940a3dd212c1daf76ffc6fa1e027fff1f"},{"_id":"public/2015/08/12/js-art-topic/index.html","modified":1439963950793,"shasum":"0d7f14f1f69b22ef5b9e335eafbdaa3fb549819c"},{"_id":"public/2015/08/12/js-data-type/index.html","modified":1439963950810,"shasum":"9acc64c4006a0a470510390d1813e75e12fe45fa"},{"_id":"public/2015/08/10/js-bit-operation/index.html","modified":1439963950819,"shasum":"ae8dc3ff6c8cdae8dfb6122281015181b559b0e6"},{"_id":"public/2015/08/08/html-hashtag/index.html","modified":1439963950830,"shasum":"863591f19cde0a8aae76e0495c48ef5463dd6bd2"},{"_id":"public/2015/08/08/css-ie-rgba/index.html","modified":1439963950835,"shasum":"ef5b6b337d2e9a350956a3c83a4e6c5cbfdbe41e"},{"_id":"public/2015/08/08/js-event-delegate/index.html","modified":1439963950844,"shasum":"0fb4f68a8a2bdbcfd866693d6c05d4b9654c9d0d"},{"_id":"public/2015/08/08/js-or-and-operator/index.html","modified":1439963950852,"shasum":"549cf859c491084006ebb1d784909f745ec0af57"},{"_id":"public/archives/index.html","modified":1439963950864,"shasum":"4817e85ed792b3b4acec14882e077906e341500e"},{"_id":"public/archives/2015/index.html","modified":1439963950876,"shasum":"09d46d4e78ea9b63e94f68025f56467b028b36a2"},{"_id":"public/archives/2015/08/index.html","modified":1439963950891,"shasum":"6f877f2bc289de5c924bc5bc8d0ed8e8bbe46a95"},{"_id":"public/index.html","modified":1439963950949,"shasum":"5f12214b9f1eeda76ea1d1c006ec6e078cd31084"},{"_id":"public/tags/js/index.html","modified":1439963950960,"shasum":"f1935d3eda3cdb17246a4889a9d56628c29f143a"},{"_id":"public/tags/代码优化/index.html","modified":1439963950966,"shasum":"6e542943f5c5c284ec9aaacf3083d2a4e0c9b8ec"},{"_id":"public/tags/运算符/index.html","modified":1439963950970,"shasum":"d76bddb9dbde9c594ab15798aa3740415d5a2ce2"},{"_id":"public/tags/条件选择/index.html","modified":1439963950974,"shasum":"61b52bf3e0dd702e04b33b1f00e29341601219ac"},{"_id":"public/tags/事件委托/index.html","modified":1439963950977,"shasum":"f03286a16eaaffda0d54a7fd399bbc897b6f2cd1"},{"_id":"public/tags/数据类型/index.html","modified":1439963950982,"shasum":"cc69782a09708354223cfb6e2fa910f3520fe240"},{"_id":"public/tags/位运算/index.html","modified":1439963950985,"shasum":"519127273826ecc9862bb7087f027f7c70dc47b1"},{"_id":"public/tags/js的艺术/index.html","modified":1439963950989,"shasum":"7974febc9e683146b562f643a80285f142f9028f"},{"_id":"public/tags/面试题/index.html","modified":1439963950992,"shasum":"938b9de899f53e641dc621d4cb78334205543787"},{"_id":"public/tags/html/index.html","modified":1439963950997,"shasum":"9e50b503b48bf5f78102ebac110869af991b47db"},{"_id":"public/tags/hash/index.html","modified":1439963951001,"shasum":"bb14387c0bd319460931a1695c5fc8dd343a26f5"},{"_id":"public/tags/ajax/index.html","modified":1439963951005,"shasum":"e2a149e456ddcc29d8382442971877231aea34b5"},{"_id":"public/tags/前端综合/index.html","modified":1439963951009,"shasum":"8337f74a27d89e7bdfed4915779f0953926baeb2"},{"_id":"public/tags/css/index.html","modified":1439963951012,"shasum":"26f03654d1704d6cc036a9c31b3d3c7ff2c65e7f"},{"_id":"public/tags/ie/index.html","modified":1439963951016,"shasum":"dac9a1ef23e636ce20c85378c4bf1a1cc9ae595e"},{"_id":"public/tags/兼容性/index.html","modified":1439963951020,"shasum":"fdca44c3139a09935ecc8b73f047d4286843c8a3"},{"_id":"public/tags/rgba/index.html","modified":1439963951024,"shasum":"5923edca37c69c7aeae59227d67a9193f55934ab"},{"_id":"public/tags/透明度/index.html","modified":1439963951027,"shasum":"91a2bd08e1ba55a59d5a3c850e754486e26947e4"},{"_id":"public/categories/javascript/index.html","modified":1439963950898,"shasum":"b5b9b10c38fbc0e7fb00c5f388a78884fb19aac0"},{"_id":"public/categories/javascript/代码优化/index.html","modified":1439963950903,"shasum":"94e30727e91e4e5a0018b9fdbac5a028e84cc8a9"},{"_id":"public/categories/javascript/数据类型/index.html","modified":1439963950907,"shasum":"ed0604894522c3f9fd0edd91e6a7f59a70916fa5"},{"_id":"public/categories/javascript/JS的艺术/index.html","modified":1439963950911,"shasum":"4ebaf7a09c8f31a7144fc6f97d890e3d3b76fab1"},{"_id":"public/categories/html-html5/index.html","modified":1439963950914,"shasum":"8682980cfa90c2f8361de4f5e130f72ae632f818"},{"_id":"public/categories/html-html5/url/index.html","modified":1439963950917,"shasum":"a7f2f17459c54de2d26ee040efb7e5457c3620b3"},{"_id":"public/categories/前端综合/index.html","modified":1439963950921,"shasum":"cbaaf696ddf5723434f4990cdb31c0d5ef8a49de"},{"_id":"public/categories/css-css3/index.html","modified":1439963950925,"shasum":"8c048c87999d36e521720752a5388a8846005a0c"},{"_id":"public/categories/css-css3/兼容性/index.html","modified":1439963950928,"shasum":"3e1f62ef74849ac43b2f156cf534a4c9aa600c9c"}],"Category":[{"name":"javascript","_id":"cidicr6t80002zy6fp9s8ic6k"},{"name":"代码优化","parent":"cidicr6t80002zy6fp9s8ic6k","_id":"cidicr6tb0005zy6fr8l6z0i1"},{"name":"数据类型","parent":"cidicr6t80002zy6fp9s8ic6k","_id":"cidicr6tm000mzy6fm15n7iys"},{"name":"JS的艺术","parent":"cidicr6t80002zy6fp9s8ic6k","_id":"cidicr6ub0010zy6fec7j5dzf"},{"name":"html/html5","_id":"cidicr6ue0019zy6f5iu0jia8"},{"name":"url","parent":"cidicr6ue0019zy6f5iu0jia8","_id":"cidicr6uf001czy6fc6fhj9jc"},{"name":"前端综合","_id":"cidicr6uh001kzy6fm3532rze"},{"name":"css/css3","_id":"cidicr6uk001pzy6fi27yxcf9"},{"name":"兼容性","parent":"cidicr6uk001pzy6fi27yxcf9","_id":"cidicr6uk001szy6frrfiih29"}],"Data":[],"Page":[{"title":"search","date":"2015-08-19T05:42:16.000Z","_content":"\n<script type=\"text/javascript\">\n  (function(w,d,t,u,n,s,e){w['SwiftypeObject']=n;w[n]=w[n]||function(){\n  (w[n].q=w[n].q||[]).push(arguments);};s=d.createElement(t);\n  e=d.getElementsByTagName(t)[0];s.async=1;s.src=u;e.parentNode.insertBefore(s,e);\n  })(window,document,'script','//s.swiftypecdn.com/install/v2/st.js','_st');\n\n  _st('install','6kyLDG75YAasqxH-iMCk','2.0.0');\n</script>","source":"search/index.md","raw":"title: search\ndate: 2015-08-19 13:42:16\n---\n\n<script type=\"text/javascript\">\n  (function(w,d,t,u,n,s,e){w['SwiftypeObject']=n;w[n]=w[n]||function(){\n  (w[n].q=w[n].q||[]).push(arguments);};s=d.createElement(t);\n  e=d.getElementsByTagName(t)[0];s.async=1;s.src=u;e.parentNode.insertBefore(s,e);\n  })(window,document,'script','//s.swiftypecdn.com/install/v2/st.js','_st');\n\n  _st('install','6kyLDG75YAasqxH-iMCk','2.0.0');\n</script>","updated":"2015-08-19T05:43:32.000Z","path":"search/index.html","_id":"cidicr6sd0000zy6fcv0281vc","comments":1,"layout":"page"}],"Post":[{"title":"JS巧妙运用||和&&运算符优化条件选择代码","date":"2015-08-08T02:48:09.000Z","keywords":"javascripts,js,逻辑运算符,代码优化,条件选择","_content":"\n&& 和 || 和其他编程语言一样，在`js`中同样是一个双目逻辑运算符，执行逻辑运算与和或。往往计算机在执行这两个逻辑运算的时候会有一个\"惰性\"的思维:\n\n1. 在执行 `exp1 && exp2 && ... && expn`的时候,会从左到右依次判断表达式1,表达式2,...,表达式n,直到遇到第一个为`false`的时候,其表达式整体运算结果必定为`false`,那么后面的所有表达式都不会执行了;\n2. 在执行 `exp1 || exp2 || ... || expn`会从左到右以此判断表达式1,表达式2,...,表达式n,直到遇到第一个为`true`的时候,其表达式整体运算结果必定为`true`,那么后面的所有表达式都不会执行了.\n\n那么,我们就可以利用这两点来简化代码中的`if...else`条件选择或者`?:`三目运算.来看下面的例子:\n<!--more-->\n\n经常会遇到当条件成立时候执行某个函数或者当条件不成立的时候执行某个函数,以前我们会写成这样:\n\n```js\n// 如果表表达式exp结果为true执行函数fun\nif( exp ) {\n  fun();\n}\n\n// 如果表达式exp结果为false执行函数fun\nif( !exp ) {\n  fun();\n}\n```\n那么现在我们可以写成:\n```\n/** 如果表达式exp结果为true执行函数fun\n* 根据上面第一条,如果exp表达式结果为false,那么结果必定为false,所以就不会执行fun\n* 反之,exp为true的时候,不能判断整体结果为true还是false,所以计算机会继续执行fun\n*/\nexp && fun();\n\n/** 如果表达式exp结果为false执行函数fun\n* 根据上面第二条,如果exp表达式结果为true,那么结果必定为true,所以就不会执行fun\n* 反之,exp为false的时候,不能判断整体结果为ture还是false,所以计算机会继续执行fun\n*/\nexp || fun();\n```","source":"_posts/js-or-and-operator.md","raw":"title: JS巧妙运用||和&&运算符优化条件选择代码\ndate: 2015-08-08 10:48:09\ntags: [js,代码优化,运算符,条件选择]\ncategories: [javascript,代码优化]\nkeywords: javascripts,js,逻辑运算符,代码优化,条件选择\n---\n\n&& 和 || 和其他编程语言一样，在`js`中同样是一个双目逻辑运算符，执行逻辑运算与和或。往往计算机在执行这两个逻辑运算的时候会有一个\"惰性\"的思维:\n\n1. 在执行 `exp1 && exp2 && ... && expn`的时候,会从左到右依次判断表达式1,表达式2,...,表达式n,直到遇到第一个为`false`的时候,其表达式整体运算结果必定为`false`,那么后面的所有表达式都不会执行了;\n2. 在执行 `exp1 || exp2 || ... || expn`会从左到右以此判断表达式1,表达式2,...,表达式n,直到遇到第一个为`true`的时候,其表达式整体运算结果必定为`true`,那么后面的所有表达式都不会执行了.\n\n那么,我们就可以利用这两点来简化代码中的`if...else`条件选择或者`?:`三目运算.来看下面的例子:\n<!--more-->\n\n经常会遇到当条件成立时候执行某个函数或者当条件不成立的时候执行某个函数,以前我们会写成这样:\n\n```js\n// 如果表表达式exp结果为true执行函数fun\nif( exp ) {\n  fun();\n}\n\n// 如果表达式exp结果为false执行函数fun\nif( !exp ) {\n  fun();\n}\n```\n那么现在我们可以写成:\n```\n/** 如果表达式exp结果为true执行函数fun\n* 根据上面第一条,如果exp表达式结果为false,那么结果必定为false,所以就不会执行fun\n* 反之,exp为true的时候,不能判断整体结果为true还是false,所以计算机会继续执行fun\n*/\nexp && fun();\n\n/** 如果表达式exp结果为false执行函数fun\n* 根据上面第二条,如果exp表达式结果为true,那么结果必定为true,所以就不会执行fun\n* 反之,exp为false的时候,不能判断整体结果为ture还是false,所以计算机会继续执行fun\n*/\nexp || fun();\n```","slug":"js-or-and-operator","published":1,"updated":"2015-08-08T06:59:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cidicr6sz0001zy6f3l55s5n1"},{"title":"js事件委托","date":"2015-08-08T03:28:36.000Z","keywords":"javascript,js,代码优化,事件委托","_content":"\n## 什么是事件委托\n事件就是指`js`中的`onclick`,`onmouseout`,`onmousemove`,等事件,委托就是自己的事件,让别人去做.也就是说利用`js`的事件冒泡的原理,父级委托自己的子元素来完成事件,那有什么好处呢?\n\n1. 避免循环,提高性能;\n2. 可以让后来通过`js`生成同类元素也能具有事先添加的事件功能.\n\n体我们可以来看下面的例子:\n<!--more-->\n有以下`html`代码片段,添加函数使点击`li`的时候`alert`其中的`html`:\n\n``` html\n<ul id=\"ul\">\n  <li>1</li>\n  <li>2</li>\n  <li>3</li>\n  <li>4</li>\n</ul>\n```\n一般来说都会这样写:\n\n``` js\nvar oUl = document.getElementById('ul');\nvar aLi = oUl.getElementsByTagName('li');\nfor( var i = 0; i < aLi.length; i++ ) {\n  aLi[i].onclick = function() {\n    //这里用this而不用aLi[i].innerHTML,有兴趣的朋友可以去试一下这种写法会出现什么问题.\n    alert(this.innerHTML);\n  }\n}\n```\n\n那事件委托了?我们可以这样写:\n``` js\nvar oUl = document.getElementById(\"ul\");\noUl.onclick = function(ev){\n  ev = ev || window.event;\n\n  // 获取点击的事件源\n  tar = ev.target || ev.srcElement;\n  \n  // 判断事件源是否为li元素\n  if(tar.nodeName.toUpperCase() == 'LI') {\n    alert(tar.innerHTML);\n  }\n}\n```\n\n可以看出来.下面这种事件委托的写法还比传统写法多几行代码,那么这么写有什么好处了?\n\n## 好处一:避免循环,提高性能\n\n可以看出来下面这种写法没用到循环,循环所消耗的性能是众所周知的,尤为是在真正的项目中,一般都不会想例子中这样3,4个元素而已.当然,如果使用`jquery`另当别论,但是同样会存在元素选择的时候的性能问题.具体看后面`jQuery`事件委托.\n\n## 好处二:可以让后来通过`js`生成同类元素也能具有事先添加的事件功能.\n\n把以下代码分别加在上面两段`js`代码后面:\n\n``` js\nvar oLi = document.createElement('li');\noLi.createTextNode('5');\noUl.appendChild(oLi);\n```\n该段代码动态创建一个`<li>5</li>`加在最后面,在上面两个事件添加的情况下分别测试,传统循环添加的是不会有该事件的,但是通过事件委托的方式添加事件有该事件,能够`alert(5)`.\n\n## jQuery事件委托添加\n\n方式1: \n```js\n// live这个方法在1.8左右以后的版本貌似已经被抛弃了\n$('#ul li').live('click',function(){\n  alert($(this).html());\n});\n```\n\n方式2:\n``` js\n$('#ul').on('click','li',function(){\n  alert($(this).html());\n});\n```","source":"_posts/js-event-delegate.md","raw":"title: js事件委托\ndate: 2015-08-08 11:28:36\ntags: [js,代码优化,事件委托]\ncategories: [javascript,代码优化]\nkeywords: javascript,js,代码优化,事件委托\n---\n\n## 什么是事件委托\n事件就是指`js`中的`onclick`,`onmouseout`,`onmousemove`,等事件,委托就是自己的事件,让别人去做.也就是说利用`js`的事件冒泡的原理,父级委托自己的子元素来完成事件,那有什么好处呢?\n\n1. 避免循环,提高性能;\n2. 可以让后来通过`js`生成同类元素也能具有事先添加的事件功能.\n\n体我们可以来看下面的例子:\n<!--more-->\n有以下`html`代码片段,添加函数使点击`li`的时候`alert`其中的`html`:\n\n``` html\n<ul id=\"ul\">\n  <li>1</li>\n  <li>2</li>\n  <li>3</li>\n  <li>4</li>\n</ul>\n```\n一般来说都会这样写:\n\n``` js\nvar oUl = document.getElementById('ul');\nvar aLi = oUl.getElementsByTagName('li');\nfor( var i = 0; i < aLi.length; i++ ) {\n  aLi[i].onclick = function() {\n    //这里用this而不用aLi[i].innerHTML,有兴趣的朋友可以去试一下这种写法会出现什么问题.\n    alert(this.innerHTML);\n  }\n}\n```\n\n那事件委托了?我们可以这样写:\n``` js\nvar oUl = document.getElementById(\"ul\");\noUl.onclick = function(ev){\n  ev = ev || window.event;\n\n  // 获取点击的事件源\n  tar = ev.target || ev.srcElement;\n  \n  // 判断事件源是否为li元素\n  if(tar.nodeName.toUpperCase() == 'LI') {\n    alert(tar.innerHTML);\n  }\n}\n```\n\n可以看出来.下面这种事件委托的写法还比传统写法多几行代码,那么这么写有什么好处了?\n\n## 好处一:避免循环,提高性能\n\n可以看出来下面这种写法没用到循环,循环所消耗的性能是众所周知的,尤为是在真正的项目中,一般都不会想例子中这样3,4个元素而已.当然,如果使用`jquery`另当别论,但是同样会存在元素选择的时候的性能问题.具体看后面`jQuery`事件委托.\n\n## 好处二:可以让后来通过`js`生成同类元素也能具有事先添加的事件功能.\n\n把以下代码分别加在上面两段`js`代码后面:\n\n``` js\nvar oLi = document.createElement('li');\noLi.createTextNode('5');\noUl.appendChild(oLi);\n```\n该段代码动态创建一个`<li>5</li>`加在最后面,在上面两个事件添加的情况下分别测试,传统循环添加的是不会有该事件的,但是通过事件委托的方式添加事件有该事件,能够`alert(5)`.\n\n## jQuery事件委托添加\n\n方式1: \n```js\n// live这个方法在1.8左右以后的版本貌似已经被抛弃了\n$('#ul li').live('click',function(){\n  alert($(this).html());\n});\n```\n\n方式2:\n``` js\n$('#ul').on('click','li',function(){\n  alert($(this).html());\n});\n```","slug":"js-event-delegate","published":1,"updated":"2015-08-08T06:59:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cidicr6tg000ezy6fb9pc8qt2"},{"title":"JS 如何获取一个数据的数据类型","date":"2015-08-12T05:54:31.000Z","keywords":"javascript,js,数据类型,constructor,instanceof,typeof","_content":"\n我们都知道,在`js`中,数据类型有:`String`,`Number`,`Boolean`,`Undefined`,`Object`,`Array`,`Function`,`Null`等,当然,其中`Array`,`Function`,`Null`都是属于`Object`的.也就是说,我们要如何区分`String`,`Number`,`Boolean`,`Undefined`,`Object`甚至于区分`Object`中的`Array`,`Function`,`Null`,`Date`,`RegExp`等.\n\n<!--more-->\n## 1. typeof\n我们先来看以下最常用的`typeof`:\n```js\nvar num = 123;\nvar str = 'abc';\nvar obj = {a: 1,b: 2};\nvar fun = function(){};\nvar bool = true;\nvar reg = /123/;\nvar und = undefined;\n\nconsole.log(typeof num);  // number\nconsole.log(typeof str);  // string\nconsole.log(typeof bool); // boolean\nconsole.log(typeof obj);  // object\nconsole.log(typeof fun);  // function\nconsole.log(typeof reg);  // object\nconsole.log(typeof und);  // undefined\n```\n上面这些情况,`typeof`都能正确的简单区分`String`,`Number`,`Boolean`,`Undefined`,`Object`以及一个特殊的`Object------Function`,但是,如果数据是我们通过`new`关键字生成的数据,就不一样了:\n```js\nvar num = new Number(123);\nvar str = new String('123');\nvar obj = new Object({a: 1,b: 2});\nvar bool = new Boolean(true);\nvar fun = new Function('alert(1)');\n\nconsole.log(typeof num);  // object\nconsole.log(typeof str);  // object\nconsole.log(typeof obj);  // object\nconsole.log(typeof bool); // object\n\nconsole.log(typeof fun);  // function\n```\n可以看到,除了`function`所有的结果都是`object`,当然,上面本身结果都是`Object`的数据(数组,正则等)就不再做重复验证.\n\n## 2. instanceof\n`instanceof`和`typeof`有所不同,它不能直接返回数据类型,`instanceof`是一个**双目运算符**,用来判断一个数据是否为一个对象的实例,返回布尔类型结果.\n\n```js\nvar num = new Number(123);\nvar str = new String('123');\nvar obj = new Object({a: 1,b: 2});\nvar bool = new Boolean(true);\nvar fun = new Function('alert(1)');\nvar reg = new RegExp('a');\n\nconsole.log(num instanceof Number); // true\nconsole.log(str instanceof String); // true\nconsole.log(obj instanceof Object); // true\nconsole.log(bool instanceof Boolean); // true\nconsole.log(fun instanceof Function); // true\nconsole.log(reg instanceof RegExp); // true\n```\n这样都是ok的,但是会出现下面几种问题:\n1.由于所有的对象都是继承`Object`,所以上面的数据都可以看成是`Object`实例化而得到的,那么在进行和`Object`的`instanceof`运算的时候都为`true`:\n\n```js\nconsole.log(num instanceof Object); // true\nconsole.log(str instanceof Object); // true\nconsole.log(obj instanceof Object); // true\nconsole.log(bool instanceof Object); // true\nconsole.log(fun instanceof Object); // true\nconsole.log(reg instanceof Object); // true\n```\n2.最原始的声明方式由于不是通过实例化声明的,会运算结果为`false`:\n\n```js\nconsole.log('123' instanceof String); // false\nconsole.log(123 instanceof Number); // false\n```\n3.`null`和`undefined`无法正常判断:\n\n```js\nconsole.log(null instanceof Object); // false\nconsole.log(undefined instanceof Object); // false\n// 不要妄想取试undefined instanceof Undefined\n// Undefined 在js中根本没这个对象\n```\n\n## 3. Constructor\n构造函数,可以通过`constructor.name`获取数据的构造函数名称来判断:\n\n```js\nconsole.log((123).constructor.name); //Number\nconsole.log(new Number(123).constructor.name); // Number\n\nconsole.log('123'.constructor.name); // String\nconsole.log(new String('123').constructor.name); // String\n\n// ...\n```\n这个几乎能完成所有数据的判断,但是,对于`null`和`undefined`两个异类同样无力.\n\n## 4. 总结\n综上,要完美的取判断一个数据的数据类型,可以这样写:\n\n```js\nfunction getType(obj) {\n  if( obj === null ) {\n    return 'object';\n  } else if( obj === undefined ) {\n    return 'undefined';\n  } else {\n    return obj.constructor.name.toLowerCase();\n  }\n}\n\ngetType(null); // object\ngetType(undefined); // undefined\ngetType(123); // number\ngetType(new String('ab')); // string\n```\n","source":"_posts/js-data-type.md","raw":"title: JS 如何获取一个数据的数据类型\ndate: 2015-08-12 13:54:31\ntags: [js,数据类型]\ncategories: [javascript,数据类型]\nkeywords: javascript,js,数据类型,constructor,instanceof,typeof\n---\n\n我们都知道,在`js`中,数据类型有:`String`,`Number`,`Boolean`,`Undefined`,`Object`,`Array`,`Function`,`Null`等,当然,其中`Array`,`Function`,`Null`都是属于`Object`的.也就是说,我们要如何区分`String`,`Number`,`Boolean`,`Undefined`,`Object`甚至于区分`Object`中的`Array`,`Function`,`Null`,`Date`,`RegExp`等.\n\n<!--more-->\n## 1. typeof\n我们先来看以下最常用的`typeof`:\n```js\nvar num = 123;\nvar str = 'abc';\nvar obj = {a: 1,b: 2};\nvar fun = function(){};\nvar bool = true;\nvar reg = /123/;\nvar und = undefined;\n\nconsole.log(typeof num);  // number\nconsole.log(typeof str);  // string\nconsole.log(typeof bool); // boolean\nconsole.log(typeof obj);  // object\nconsole.log(typeof fun);  // function\nconsole.log(typeof reg);  // object\nconsole.log(typeof und);  // undefined\n```\n上面这些情况,`typeof`都能正确的简单区分`String`,`Number`,`Boolean`,`Undefined`,`Object`以及一个特殊的`Object------Function`,但是,如果数据是我们通过`new`关键字生成的数据,就不一样了:\n```js\nvar num = new Number(123);\nvar str = new String('123');\nvar obj = new Object({a: 1,b: 2});\nvar bool = new Boolean(true);\nvar fun = new Function('alert(1)');\n\nconsole.log(typeof num);  // object\nconsole.log(typeof str);  // object\nconsole.log(typeof obj);  // object\nconsole.log(typeof bool); // object\n\nconsole.log(typeof fun);  // function\n```\n可以看到,除了`function`所有的结果都是`object`,当然,上面本身结果都是`Object`的数据(数组,正则等)就不再做重复验证.\n\n## 2. instanceof\n`instanceof`和`typeof`有所不同,它不能直接返回数据类型,`instanceof`是一个**双目运算符**,用来判断一个数据是否为一个对象的实例,返回布尔类型结果.\n\n```js\nvar num = new Number(123);\nvar str = new String('123');\nvar obj = new Object({a: 1,b: 2});\nvar bool = new Boolean(true);\nvar fun = new Function('alert(1)');\nvar reg = new RegExp('a');\n\nconsole.log(num instanceof Number); // true\nconsole.log(str instanceof String); // true\nconsole.log(obj instanceof Object); // true\nconsole.log(bool instanceof Boolean); // true\nconsole.log(fun instanceof Function); // true\nconsole.log(reg instanceof RegExp); // true\n```\n这样都是ok的,但是会出现下面几种问题:\n1.由于所有的对象都是继承`Object`,所以上面的数据都可以看成是`Object`实例化而得到的,那么在进行和`Object`的`instanceof`运算的时候都为`true`:\n\n```js\nconsole.log(num instanceof Object); // true\nconsole.log(str instanceof Object); // true\nconsole.log(obj instanceof Object); // true\nconsole.log(bool instanceof Object); // true\nconsole.log(fun instanceof Object); // true\nconsole.log(reg instanceof Object); // true\n```\n2.最原始的声明方式由于不是通过实例化声明的,会运算结果为`false`:\n\n```js\nconsole.log('123' instanceof String); // false\nconsole.log(123 instanceof Number); // false\n```\n3.`null`和`undefined`无法正常判断:\n\n```js\nconsole.log(null instanceof Object); // false\nconsole.log(undefined instanceof Object); // false\n// 不要妄想取试undefined instanceof Undefined\n// Undefined 在js中根本没这个对象\n```\n\n## 3. Constructor\n构造函数,可以通过`constructor.name`获取数据的构造函数名称来判断:\n\n```js\nconsole.log((123).constructor.name); //Number\nconsole.log(new Number(123).constructor.name); // Number\n\nconsole.log('123'.constructor.name); // String\nconsole.log(new String('123').constructor.name); // String\n\n// ...\n```\n这个几乎能完成所有数据的判断,但是,对于`null`和`undefined`两个异类同样无力.\n\n## 4. 总结\n综上,要完美的取判断一个数据的数据类型,可以这样写:\n\n```js\nfunction getType(obj) {\n  if( obj === null ) {\n    return 'object';\n  } else if( obj === undefined ) {\n    return 'undefined';\n  } else {\n    return obj.constructor.name.toLowerCase();\n  }\n}\n\ngetType(null); // object\ngetType(undefined); // undefined\ngetType(123); // number\ngetType(new String('ab')); // string\n```\n","slug":"js-data-type","published":1,"updated":"2015-08-13T03:04:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cidicr6tl000lzy6f3swuic2w"},{"title":"JS位运算的巧妙运用","date":"2015-08-10T11:11:56.000Z","keywords":"js,javascript,代码优化,位运算","_content":"位运算,对于底层的`C`,`C++`开发人员来说并不陌生,但是对于`js`这门弱语言来说,位运算总感觉是那么高深.那么我们为什么还要用位运算呢?\n\n首先,编程语言都是通过机器语言,汇编语言,C,C++,Java等这样一层一层封装出来的,每次封装对于开发人员来说代码的阅读性更好了,但是计算机在\"阅读\"这些代码的时候还是会一级一级的转换回去才能执行这些指令,所以我们越容易读懂的代码,计算机的执行效率就越低.尽管科技越来越发达,硬件方面的技术很强,但是这些小小的优化并不是杯水车薪.\n其次,可以装逼.在一些小菜鸟面前用这些他们看不懂的代码,很装逼,有木有.\n\n<!--more-->\n\n具体的位运算涉及到二进制转换,原码,反码,补码等知识,就不一一罗列,而且在`js`中用处很小,只需要了解运用下面几点东西就OK了.\n\n### 1. 奇偶性判断------按位与(&)\n\n按位与运算是把两个操作数转换成二进制再逐位比较,相同其结果为1,否则为0.而所有数字转化为二进制的奇偶性就只用看末尾,奇数尾数为1,偶数尾数为0.所以:\n\n``` js\nif ( a & 1 ) {\n  alert( 'a是奇数!' );\n} else {  \n  alert ( 'a是偶数!' )\n}\n```\n<a name=\"change-number\" id=\"change-number\"></a>\n### 2. 两个整数的互换------按位异或(^) \n\n加减互为逆运算,异或和异或互为逆运算.\n\n利用加减:\n``` js\nvar a = 1;\nvar b = 2;\na = a + b;\nb = a - b;\na = a - b;\nconsole.log(a,b)\n```\n\n按位异或:\n``` js\nvar a = 1;\nvar b = 2;\na = a ^ b;\nb = a ^ b;\na = a ^ b;\nconsole.log(a,b);\n```\n\n两个整数互换可以申明第三个中间变量进行临时存储实现,但是声明变量会占用内存,不友好.而加减又没有位运算效率高.\n\n### 3. -1的判断------按位取反(~)\n\n判断一个数是否为-1是我们经常遇到的,`indexOf()`在查找字符串的时候没有找到会返回-1,很多程序,插件,框架错误状态值默认返回-1,前后端分离`ajax`请求有误的时候返回-1(这个一般是一个项目中统一规定,当然也有返回0的,我们这里不做讨论).在位运算中,**`~-1===0`**的.\n``` js\n// 以前\nif ( str.indexOf('a') != -1 ) {\n  alert('a在字符串str中');\n}\n\n// 现在\nif ( ~str.indexOf('a') ) {\n  alert('a在字符串str中');\n}\n```\n\n``` js\n// 以前\n$.get(url, data, function(data) {\n  if( data.status != -1 ) {\n    // 数据正常处理\n  } else {\n    // 数据有误处理\n  }\n});\n\n//现在\n$.get(url, data, function(data) {\n  if( ~data.status ) {\n    // 数据正常处理\n  } else {\n    // 数据有误处理\n  }\n});\n```\n\n### 4. 非负数取整------无符号右移(>>>)\n\n很多时候我们遇到正整数去掉(注意,不是四舍五入)小数点,一般会用到`Math.floor()`;\n``` js\n// 以前\nMath.floor(3.52);  // 结果 3\n\n// 现在\n3.53 >>> 0;  // 结果 3\n```\n\n### 5. 取中间一位数------无符号右移(>>>)\n\n很多时候我们会遇到取中间一位数,偶数就取中间偏左一位.如: 在一列翻页页码标签中,活跃的(active)始终在中间,要取得中间一位是第几位.(总共5个则第取3个,总共8个则取第4个).\n\n``` js\n// 以前 \nif ( totalPages是偶数 ) {\n  alert( '中间一位是第' + totalPage/2 +'位' );\n} else {\n  alert( '中间一位是第' + (totalPage + 1)/2 +'位' );\n}\n\n// 现在\nalert( '中间一位是第' + ( totalPage >>> 1 ) +'位' );\n```\n总之,还有很多位运算方面技巧性的代码写法,有兴趣可以取研究研究.\n\n**PS:位运算只针对于非NaN的Number数据类型,对于非Number数据会被强制隐式转换成数字0再进行计算,同时位运算的优先级很低,注意需要加上括号增加优先级**","source":"_posts/js-bit-operation.md","raw":"title: JS位运算的巧妙运用\ndate: 2015-08-10 19:11:56\ntags: [js,位运算,代码优化]\ncategories: [javascript,代码优化]\nkeywords: js,javascript,代码优化,位运算\n---\n位运算,对于底层的`C`,`C++`开发人员来说并不陌生,但是对于`js`这门弱语言来说,位运算总感觉是那么高深.那么我们为什么还要用位运算呢?\n\n首先,编程语言都是通过机器语言,汇编语言,C,C++,Java等这样一层一层封装出来的,每次封装对于开发人员来说代码的阅读性更好了,但是计算机在\"阅读\"这些代码的时候还是会一级一级的转换回去才能执行这些指令,所以我们越容易读懂的代码,计算机的执行效率就越低.尽管科技越来越发达,硬件方面的技术很强,但是这些小小的优化并不是杯水车薪.\n其次,可以装逼.在一些小菜鸟面前用这些他们看不懂的代码,很装逼,有木有.\n\n<!--more-->\n\n具体的位运算涉及到二进制转换,原码,反码,补码等知识,就不一一罗列,而且在`js`中用处很小,只需要了解运用下面几点东西就OK了.\n\n### 1. 奇偶性判断------按位与(&)\n\n按位与运算是把两个操作数转换成二进制再逐位比较,相同其结果为1,否则为0.而所有数字转化为二进制的奇偶性就只用看末尾,奇数尾数为1,偶数尾数为0.所以:\n\n``` js\nif ( a & 1 ) {\n  alert( 'a是奇数!' );\n} else {  \n  alert ( 'a是偶数!' )\n}\n```\n<a name=\"change-number\" id=\"change-number\"></a>\n### 2. 两个整数的互换------按位异或(^) \n\n加减互为逆运算,异或和异或互为逆运算.\n\n利用加减:\n``` js\nvar a = 1;\nvar b = 2;\na = a + b;\nb = a - b;\na = a - b;\nconsole.log(a,b)\n```\n\n按位异或:\n``` js\nvar a = 1;\nvar b = 2;\na = a ^ b;\nb = a ^ b;\na = a ^ b;\nconsole.log(a,b);\n```\n\n两个整数互换可以申明第三个中间变量进行临时存储实现,但是声明变量会占用内存,不友好.而加减又没有位运算效率高.\n\n### 3. -1的判断------按位取反(~)\n\n判断一个数是否为-1是我们经常遇到的,`indexOf()`在查找字符串的时候没有找到会返回-1,很多程序,插件,框架错误状态值默认返回-1,前后端分离`ajax`请求有误的时候返回-1(这个一般是一个项目中统一规定,当然也有返回0的,我们这里不做讨论).在位运算中,**`~-1===0`**的.\n``` js\n// 以前\nif ( str.indexOf('a') != -1 ) {\n  alert('a在字符串str中');\n}\n\n// 现在\nif ( ~str.indexOf('a') ) {\n  alert('a在字符串str中');\n}\n```\n\n``` js\n// 以前\n$.get(url, data, function(data) {\n  if( data.status != -1 ) {\n    // 数据正常处理\n  } else {\n    // 数据有误处理\n  }\n});\n\n//现在\n$.get(url, data, function(data) {\n  if( ~data.status ) {\n    // 数据正常处理\n  } else {\n    // 数据有误处理\n  }\n});\n```\n\n### 4. 非负数取整------无符号右移(>>>)\n\n很多时候我们遇到正整数去掉(注意,不是四舍五入)小数点,一般会用到`Math.floor()`;\n``` js\n// 以前\nMath.floor(3.52);  // 结果 3\n\n// 现在\n3.53 >>> 0;  // 结果 3\n```\n\n### 5. 取中间一位数------无符号右移(>>>)\n\n很多时候我们会遇到取中间一位数,偶数就取中间偏左一位.如: 在一列翻页页码标签中,活跃的(active)始终在中间,要取得中间一位是第几位.(总共5个则第取3个,总共8个则取第4个).\n\n``` js\n// 以前 \nif ( totalPages是偶数 ) {\n  alert( '中间一位是第' + totalPage/2 +'位' );\n} else {\n  alert( '中间一位是第' + (totalPage + 1)/2 +'位' );\n}\n\n// 现在\nalert( '中间一位是第' + ( totalPage >>> 1 ) +'位' );\n```\n总之,还有很多位运算方面技巧性的代码写法,有兴趣可以取研究研究.\n\n**PS:位运算只针对于非NaN的Number数据类型,对于非Number数据会被强制隐式转换成数字0再进行计算,同时位运算的优先级很低,注意需要加上括号增加优先级**","slug":"js-bit-operation","published":1,"updated":"2015-08-12T11:39:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cidicr6u7000szy6f6quz3r7e"},{"title":"JS一些艺术性答案的面试题","date":"2015-08-12T11:20:41.000Z","keywords":"javascript,js,艺术,面试题,答案","_content":"\n在很多`js`程序中,很多功能或者逻辑只要求实现都是很简单的,但是要达到一个\"艺术化\"的代码形式,那才更有挑战.\n\n代码,只有我们能看,用户看到的只是结果,搞那么完美有啥意义?只要达到目的不就ok了?NO~!,提升代码的质量同时也是对自己能力的提升,也就代表着薪资.当然,还有一些其他我们不关注的(毕竟我们关注的只有钱),如:性能的提升,装逼等.那怎样的代码才叫有\"艺术\"呢?\n\n前面我们写到的一篇文章,[JS位运算的巧妙运用](/2015/08/10/js-bit-operation/)等.同样,下面再来看几个例子:\n\n<!--more-->\n\n## 1. 获取某一天是星期几\n\n二逼程序员写法:\n```js\nfunction getWeek(date){\n  var week = new Date(date).getDay();\n  if( week == 0 ){\n    return '星期天';\n  }else if( week == 1 ){\n    return '星期一';\n  }else if( week == 2 ){\n    return '星期二';\n  }\n  // ... 省略这些无聊的代码了\n}\n```\n普通程序员写法:\n```js\nfunction getWeek(date){\n  var week = new Date(date).getDay();\n  switch( week ){\n    case 0: return '星期天';\n    case 1: return '星期一';\n    case 2: return '星期三';\n    // ... 省略N字\n  }\n}\n```\n文艺程序员写法:\n```js\nfunction getWeek(date){\n  return '星期' + ['天','一','二','三','四','五','六'][new Date(date).getDay()];\n  // 或者这样:\n  // return '星期' + '天一二三四五六'.charAt(new Date(date).getDay());\n}\n```\n这就是艺术,巧妙运用数组或者字符串的`charAt`来避免条件分支的选择(`if...else`或者`switch...case`).继续往下看.\n\n## 2. 两个非Number类型数据的交换\n\n前面文章 [JS位运算的巧妙运用#两个整数的互换](/2015/08/10/js-bit-operation/#change-number) 已经提到过可以通过加减或者位运算的按位异或(^)来交换两个Number类型的数据.但是对于其他数据类型呢?\n\n```js\nvar a = [1,2,3];\nvar b = {a: 1,b: 2};\na = [b,b = a][0];\n```\n同样利用数组,简简单单的一句话交换两个复杂数据类型,避免了创建中间变量,当然这个也相当于创建了中间变量------一个数组,不过代码上却简洁了许多.\n\n## 3. 闰年的判断\n\n二逼程序员写法:\n```js\nfunction isLeapYear(y){\n  if( y%400 == 0 ){\n    return true;\n  }else if( y%4 == 0 && y%100 != 0 ){\n    return true;\n  }else {\n    return false;\n  }\n} \n```\n\n普通程序员写法:\n```js\nfunction isLeapYear(y){\n  return y%400 == 0 || ( y%4 == 0 && y%100 != 0 );\n}\n```\n\n文艺程序员写法:\n```js\nfunction isLeapYear(y){\n  return new Date( y , 1, 29 ).getDate() == 29;\n}\n```\n先解释下这段代码,在js中,采用`new Date()`实例化一个时间对象的时候,只要年月日数据类型正常,不管传入的时间是否合理,比如传入1991年2月29(当然,平年2月是没有29的,所以数据不合理,**但是注意一点,这个月份需要减去1,Date中月份是从0开始到11结束**),系统会默认往后面移一天,也就是`new Date(1991,1,29)`得到的结果是1991年3月1号,但是如果传入的是2000年2月29,闰年是有这一天的,那`new Date(2000,1,29)`得到的结果就是2000年2月29,所以我们只需要再获取结果的日期是否是29来判断是否为闰年.\n\n## 4. 合并一个数组到另外一个数组上面\n\n二逼程序员写法:\n```js\nvar a = [1,2,3];\nvar b = [4,5,6];\nfor( var i = 0; i < b.length; i++ ){\n  a[a.length] = b[i];\n  // 或许牛逼一点的二逼还会这样写\n  // a.push(b[i]);\n}\n```\n\n普通程序员写法:\n```js\nvar a = [1,2,3];\nvar b = [4,5,6];\na = a.concat(b);\n```\n这种写法有什么不好呢?注意原题,我们是合并一个数组到另外一个数组上面,`concat`会新创建一个数组,这样会多消耗一些不必要的内存.最后我们还是要把结果重新赋值到变量a上.\n\n文艺程序员写法:\n```js\nvar a = [1,2,3];\nvar b = [4,5,6];\n[].push.apply(a,b);\n```\n\n需要解释么?还是解释以下吧,首先我们要了解一下`apply`,这玩意是\"函数对象\"的一个方法,然后可以跟两个参数,第一个参数是拿来调用这个函数的,第二个参数这个函数运行需要的参数,然后...就这样完成咯.\n\n## 5. 创建一个长度为n的数组,其每个值都为'a'\n\n大部分程序员写法:\n```js\nfunction createArr(n) {\n  var a = [];\n  for( var i = 0; i < n;i++ ){\n    a.push('a');\n  }\n  return a;\n}\n```\n\n文艺程序员写法:\n```js\nfunction createArr(n) {\n  return new Array(n+1).join('a').split('');\n}\n```\n至于原因么,大家取`new Array(n)`看一下结果就知道咯.然后就是你用`join`和`split`来解决.","source":"_posts/js-art-topic.md","raw":"title: JS一些艺术性答案的面试题\ndate: 2015-08-12 19:20:41\ntags: [js,js的艺术,面试题]\ncategories: [javascript,JS的艺术]\nkeywords: javascript,js,艺术,面试题,答案\n---\n\n在很多`js`程序中,很多功能或者逻辑只要求实现都是很简单的,但是要达到一个\"艺术化\"的代码形式,那才更有挑战.\n\n代码,只有我们能看,用户看到的只是结果,搞那么完美有啥意义?只要达到目的不就ok了?NO~!,提升代码的质量同时也是对自己能力的提升,也就代表着薪资.当然,还有一些其他我们不关注的(毕竟我们关注的只有钱),如:性能的提升,装逼等.那怎样的代码才叫有\"艺术\"呢?\n\n前面我们写到的一篇文章,[JS位运算的巧妙运用](/2015/08/10/js-bit-operation/)等.同样,下面再来看几个例子:\n\n<!--more-->\n\n## 1. 获取某一天是星期几\n\n二逼程序员写法:\n```js\nfunction getWeek(date){\n  var week = new Date(date).getDay();\n  if( week == 0 ){\n    return '星期天';\n  }else if( week == 1 ){\n    return '星期一';\n  }else if( week == 2 ){\n    return '星期二';\n  }\n  // ... 省略这些无聊的代码了\n}\n```\n普通程序员写法:\n```js\nfunction getWeek(date){\n  var week = new Date(date).getDay();\n  switch( week ){\n    case 0: return '星期天';\n    case 1: return '星期一';\n    case 2: return '星期三';\n    // ... 省略N字\n  }\n}\n```\n文艺程序员写法:\n```js\nfunction getWeek(date){\n  return '星期' + ['天','一','二','三','四','五','六'][new Date(date).getDay()];\n  // 或者这样:\n  // return '星期' + '天一二三四五六'.charAt(new Date(date).getDay());\n}\n```\n这就是艺术,巧妙运用数组或者字符串的`charAt`来避免条件分支的选择(`if...else`或者`switch...case`).继续往下看.\n\n## 2. 两个非Number类型数据的交换\n\n前面文章 [JS位运算的巧妙运用#两个整数的互换](/2015/08/10/js-bit-operation/#change-number) 已经提到过可以通过加减或者位运算的按位异或(^)来交换两个Number类型的数据.但是对于其他数据类型呢?\n\n```js\nvar a = [1,2,3];\nvar b = {a: 1,b: 2};\na = [b,b = a][0];\n```\n同样利用数组,简简单单的一句话交换两个复杂数据类型,避免了创建中间变量,当然这个也相当于创建了中间变量------一个数组,不过代码上却简洁了许多.\n\n## 3. 闰年的判断\n\n二逼程序员写法:\n```js\nfunction isLeapYear(y){\n  if( y%400 == 0 ){\n    return true;\n  }else if( y%4 == 0 && y%100 != 0 ){\n    return true;\n  }else {\n    return false;\n  }\n} \n```\n\n普通程序员写法:\n```js\nfunction isLeapYear(y){\n  return y%400 == 0 || ( y%4 == 0 && y%100 != 0 );\n}\n```\n\n文艺程序员写法:\n```js\nfunction isLeapYear(y){\n  return new Date( y , 1, 29 ).getDate() == 29;\n}\n```\n先解释下这段代码,在js中,采用`new Date()`实例化一个时间对象的时候,只要年月日数据类型正常,不管传入的时间是否合理,比如传入1991年2月29(当然,平年2月是没有29的,所以数据不合理,**但是注意一点,这个月份需要减去1,Date中月份是从0开始到11结束**),系统会默认往后面移一天,也就是`new Date(1991,1,29)`得到的结果是1991年3月1号,但是如果传入的是2000年2月29,闰年是有这一天的,那`new Date(2000,1,29)`得到的结果就是2000年2月29,所以我们只需要再获取结果的日期是否是29来判断是否为闰年.\n\n## 4. 合并一个数组到另外一个数组上面\n\n二逼程序员写法:\n```js\nvar a = [1,2,3];\nvar b = [4,5,6];\nfor( var i = 0; i < b.length; i++ ){\n  a[a.length] = b[i];\n  // 或许牛逼一点的二逼还会这样写\n  // a.push(b[i]);\n}\n```\n\n普通程序员写法:\n```js\nvar a = [1,2,3];\nvar b = [4,5,6];\na = a.concat(b);\n```\n这种写法有什么不好呢?注意原题,我们是合并一个数组到另外一个数组上面,`concat`会新创建一个数组,这样会多消耗一些不必要的内存.最后我们还是要把结果重新赋值到变量a上.\n\n文艺程序员写法:\n```js\nvar a = [1,2,3];\nvar b = [4,5,6];\n[].push.apply(a,b);\n```\n\n需要解释么?还是解释以下吧,首先我们要了解一下`apply`,这玩意是\"函数对象\"的一个方法,然后可以跟两个参数,第一个参数是拿来调用这个函数的,第二个参数这个函数运行需要的参数,然后...就这样完成咯.\n\n## 5. 创建一个长度为n的数组,其每个值都为'a'\n\n大部分程序员写法:\n```js\nfunction createArr(n) {\n  var a = [];\n  for( var i = 0; i < n;i++ ){\n    a.push('a');\n  }\n  return a;\n}\n```\n\n文艺程序员写法:\n```js\nfunction createArr(n) {\n  return new Array(n+1).join('a').split('');\n}\n```\n至于原因么,大家取`new Array(n)`看一下结果就知道咯.然后就是你用`join`和`split`来解决.","slug":"js-art-topic","published":1,"updated":"2015-08-12T12:18:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cidicr6ua000zzy6fsu961div"},{"title":"HTML你用hash(#!)值弥补ajax局部刷新加载的不足","date":"2015-08-08T07:02:33.000Z","keywords":"html,hash,ajax,#!,url,局部刷新,书签,历史记录","_content":"\n自`ajax`的崛起，`web`页面大部分数据的更新都只是进行局部的数据刷新而不再是以前那种整个页面的刷新，尤其是在移动端,大多数`web`页面都采用单页面利用`ajax`减少对服务器的请求.但是这产生了一个缺陷，那就是`ajax`局部刷新浏览器不会产生历史记录，用户无法进行前进后退访问历史记录，同样，用户也无法存储书签，因为url地址完全没变，存下来的书签只是网页首页，里面的数据不会跟着刷新的。还有一点就是,不便于进行`SEO`.\n\n在进入主题之前我们想来了解一下`html`中的地址对象------`location`.\n<!--more-->\n\n## href------url\n\n一个网页总有一个地址，也就是`url`链接，利用`location`对象的`href`属性可以得到或者修改这个地址。\n\n得到浏览器中地址栏完整的字符串:\n``` js\nconsole.log(location.href);\n```\n\n当然,你也可以修改这个值来达到网页的重定向:\n``` js\nlocation.href = 'blog.tenfour.cn';\n```\n\n## search------参数\n\n经常我们会看到一个地址后面跟着一个?后面还有一长串东西,如下:\n```\nblog.tenfour.cn?name=tenfou&age=100&sex=M\n```\n这个玩意有几个用处:\n\n1. 页面传递给后台的参数\n2. 页面传递给另一个页面的参数\n3. 版本控制或者避免浏览器缓存\n\n具体与本章无关,就不多说.\n\n## hash------锚点\n在本页面不同点跳转:\n```html\n// 页面顶部预设一个锚点,浏览器差异,最好把id和name都设置一样的值\n<a name=\"top\" id=\"top\"></a>\n//...省略N行代码\n<a href=\"#top\">点击返回顶部</a>\n```\n当然,不同页面也可以跳转:\n``` html\n// download.html 下载页面\n\n// ... 前面省略N行广告代码\n<a name=\"download\" id=\"download\"></a>\n<a href=\"aa\">南方电信</a>\n<a href=\"bb\">北方网通</a>\n\n// 另外一个页面\n<a href=\"download.html#download\">点击前往下载</a>\n```\n#后面的值就叫`hash`值,可以通过`location.hash`获取或者改变.\n\n试过上面几个例子的或许会发现，只要当地址改变，无论是页面(href)、参数(search)、锚点(hash)改变，浏览器都会产生记录。我们可以利用这这个来实现ajax局部刷新让浏览器生成历史记录。局部刷新也就是说页面不会刷新，地址改变或者参数改变都会刷新页面，所以我们只有利用锚点(hash)来实现。\n锚点跳转不会刷新页面,但是会产生浏览器记录,我们可以你用这点来解决前面提到的浏览器ajax局部刷新无浏览器记录的缺陷.\n\n## window.onhashchange\n高版本的浏览器有一个事件`window.onhashchange`可以监听浏览器当前页面的`hash`值,当`hash`值改变的时候会执行该事件函数.\n\n```html\n<a href=\"#hash1\">hash1</a>\n<a href=\"#hash2\">hash2</a>\n<a href=\"#hash3\">hash3</a>\n<script>\n  window.onhashchange = function(){\n    alert(location.hash);\n  }\n</script>\n//可以发现每次点击一个hash都改变了，都执行了hashchange函数的。\n\n```\n\n下面我们就来模拟一个ajax局部刷新产生浏览器记录的方法：点击导航，局部刷新content类容，并且产生浏览器历史记录:\n``` html\n<ul class=\"nav\">\n  <li>\n    <a href=\"#home\">首页</a>\n    <a href=\"#contat\">联系我们</a>\n    <a href=\"#about\">关于我们</a>\n  </li>\n</ul>\n\n<div class=\"content\">\n  <!-- 内容区域 -->\n</div>\n<script>\n//点击主页的局部刷新\nfunction loadHome(){\n  $('.content').html('主页内容');\n}\n\n//点击主页的局部刷新\nfunction loadContact(){\n  $('.content').html('联系我们内容');\n}\n\n//点击主页的局部刷新\nfunction loadAbout(){\n  $('.content').html('关于我们内容');\n}\n\nwindow.onhashchange = function(){\n  switch(location.hash){\n    case '#home' : loadHome(); break;\n    case '#contat' : loadContact(); break;\n    case '#about' : loadAbout(); break;\n  }\n}\n</script>\n```\nOK，这样就可以产生浏览器历史记录了，可以试试，但是还有一点没有解决，那就是书签，你直接复制一个输入到地址栏回车，还是首页，这事因为首次输入并没有触发onhashchange事件，所以我们还要加一段话：\n``` js\nswitch(location.hash){\n  case '#home' : loadHome(); break;\n  case '#contat' : loadContact(); break;\n  case '#about' : loadAbout(); break;\n}\n```\n这样页面一加载就会执行一次。所以存储书签也能实现了.\n\n## url中的#!\n\n既然锚点`(#hash)`能解决，那#!又是什么呢？\n要理解这个就要熟悉`seo`，搜索引擎优化，对于锚点改变的连接对于搜索引擎来说，只是一个连接.例如：`tenfour.cn#nodejs和tenfour.cn#express`对于搜索引擎来说，会忽略掉后面的`hash`值，只会记录`tenfour.cn`一条记录。前不久，谷歌等部分浏览器产生了一条新的“潜规则”，对于#!这类的hash值不会被忽略掉，搜索引擎会进行抓取并生成记录。所以一般我们ajax局部刷新的hash会写成:\n``` html\n<ul class=\"nav\">  \n  <li>\n    <a href=\"#!/home\">首页</a>\n    <a href=\"#!/contat\">联系我们</a>\n    <a href=\"#!/about\">关于我们</a>\n  </li>\n</ul>\n<!-- 当然，js处理判断里面也要把这个加进去，location.hash获取的是#后面的所有类容(包括#) -->\n```\n\n## 兼容性处理\n对于低版本不支持`onhashchange`的浏览器可以用计时器无限刷新判断或利用`iframe`,`location.hash`这个是所有浏览器都支持的(包括IE6)，所以只需要解决`onhashchange`的兼容就ok了，这个解决方法自己研究，我要LOL去了。","source":"_posts/html-hashtag.md","raw":"title: HTML你用hash(#!)值弥补ajax局部刷新加载的不足\ndate: 2015-08-08 15:02:33\ntags: [html,hash,ajax]\ncategories: [html/html5,url]\nkeywords: html,hash,ajax,#!,url,局部刷新,书签,历史记录\n---\n\n自`ajax`的崛起，`web`页面大部分数据的更新都只是进行局部的数据刷新而不再是以前那种整个页面的刷新，尤其是在移动端,大多数`web`页面都采用单页面利用`ajax`减少对服务器的请求.但是这产生了一个缺陷，那就是`ajax`局部刷新浏览器不会产生历史记录，用户无法进行前进后退访问历史记录，同样，用户也无法存储书签，因为url地址完全没变，存下来的书签只是网页首页，里面的数据不会跟着刷新的。还有一点就是,不便于进行`SEO`.\n\n在进入主题之前我们想来了解一下`html`中的地址对象------`location`.\n<!--more-->\n\n## href------url\n\n一个网页总有一个地址，也就是`url`链接，利用`location`对象的`href`属性可以得到或者修改这个地址。\n\n得到浏览器中地址栏完整的字符串:\n``` js\nconsole.log(location.href);\n```\n\n当然,你也可以修改这个值来达到网页的重定向:\n``` js\nlocation.href = 'blog.tenfour.cn';\n```\n\n## search------参数\n\n经常我们会看到一个地址后面跟着一个?后面还有一长串东西,如下:\n```\nblog.tenfour.cn?name=tenfou&age=100&sex=M\n```\n这个玩意有几个用处:\n\n1. 页面传递给后台的参数\n2. 页面传递给另一个页面的参数\n3. 版本控制或者避免浏览器缓存\n\n具体与本章无关,就不多说.\n\n## hash------锚点\n在本页面不同点跳转:\n```html\n// 页面顶部预设一个锚点,浏览器差异,最好把id和name都设置一样的值\n<a name=\"top\" id=\"top\"></a>\n//...省略N行代码\n<a href=\"#top\">点击返回顶部</a>\n```\n当然,不同页面也可以跳转:\n``` html\n// download.html 下载页面\n\n// ... 前面省略N行广告代码\n<a name=\"download\" id=\"download\"></a>\n<a href=\"aa\">南方电信</a>\n<a href=\"bb\">北方网通</a>\n\n// 另外一个页面\n<a href=\"download.html#download\">点击前往下载</a>\n```\n#后面的值就叫`hash`值,可以通过`location.hash`获取或者改变.\n\n试过上面几个例子的或许会发现，只要当地址改变，无论是页面(href)、参数(search)、锚点(hash)改变，浏览器都会产生记录。我们可以利用这这个来实现ajax局部刷新让浏览器生成历史记录。局部刷新也就是说页面不会刷新，地址改变或者参数改变都会刷新页面，所以我们只有利用锚点(hash)来实现。\n锚点跳转不会刷新页面,但是会产生浏览器记录,我们可以你用这点来解决前面提到的浏览器ajax局部刷新无浏览器记录的缺陷.\n\n## window.onhashchange\n高版本的浏览器有一个事件`window.onhashchange`可以监听浏览器当前页面的`hash`值,当`hash`值改变的时候会执行该事件函数.\n\n```html\n<a href=\"#hash1\">hash1</a>\n<a href=\"#hash2\">hash2</a>\n<a href=\"#hash3\">hash3</a>\n<script>\n  window.onhashchange = function(){\n    alert(location.hash);\n  }\n</script>\n//可以发现每次点击一个hash都改变了，都执行了hashchange函数的。\n\n```\n\n下面我们就来模拟一个ajax局部刷新产生浏览器记录的方法：点击导航，局部刷新content类容，并且产生浏览器历史记录:\n``` html\n<ul class=\"nav\">\n  <li>\n    <a href=\"#home\">首页</a>\n    <a href=\"#contat\">联系我们</a>\n    <a href=\"#about\">关于我们</a>\n  </li>\n</ul>\n\n<div class=\"content\">\n  <!-- 内容区域 -->\n</div>\n<script>\n//点击主页的局部刷新\nfunction loadHome(){\n  $('.content').html('主页内容');\n}\n\n//点击主页的局部刷新\nfunction loadContact(){\n  $('.content').html('联系我们内容');\n}\n\n//点击主页的局部刷新\nfunction loadAbout(){\n  $('.content').html('关于我们内容');\n}\n\nwindow.onhashchange = function(){\n  switch(location.hash){\n    case '#home' : loadHome(); break;\n    case '#contat' : loadContact(); break;\n    case '#about' : loadAbout(); break;\n  }\n}\n</script>\n```\nOK，这样就可以产生浏览器历史记录了，可以试试，但是还有一点没有解决，那就是书签，你直接复制一个输入到地址栏回车，还是首页，这事因为首次输入并没有触发onhashchange事件，所以我们还要加一段话：\n``` js\nswitch(location.hash){\n  case '#home' : loadHome(); break;\n  case '#contat' : loadContact(); break;\n  case '#about' : loadAbout(); break;\n}\n```\n这样页面一加载就会执行一次。所以存储书签也能实现了.\n\n## url中的#!\n\n既然锚点`(#hash)`能解决，那#!又是什么呢？\n要理解这个就要熟悉`seo`，搜索引擎优化，对于锚点改变的连接对于搜索引擎来说，只是一个连接.例如：`tenfour.cn#nodejs和tenfour.cn#express`对于搜索引擎来说，会忽略掉后面的`hash`值，只会记录`tenfour.cn`一条记录。前不久，谷歌等部分浏览器产生了一条新的“潜规则”，对于#!这类的hash值不会被忽略掉，搜索引擎会进行抓取并生成记录。所以一般我们ajax局部刷新的hash会写成:\n``` html\n<ul class=\"nav\">  \n  <li>\n    <a href=\"#!/home\">首页</a>\n    <a href=\"#!/contat\">联系我们</a>\n    <a href=\"#!/about\">关于我们</a>\n  </li>\n</ul>\n<!-- 当然，js处理判断里面也要把这个加进去，location.hash获取的是#后面的所有类容(包括#) -->\n```\n\n## 兼容性处理\n对于低版本不支持`onhashchange`的浏览器可以用计时器无限刷新判断或利用`iframe`,`location.hash`这个是所有浏览器都支持的(包括IE6)，所以只需要解决`onhashchange`的兼容就ok了，这个解决方法自己研究，我要LOL去了。","slug":"html-hashtag","published":1,"updated":"2015-08-08T07:40:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cidicr6ue0018zy6ffkcuvvi0"},{"title":"输入网址到浏览器呈现页面的全过程","date":"2015-08-13T12:28:25.000Z","keywords":"前端综合,页面呈现,dns,域名解析,DOM树,呈现树,三次握手,HTML解析","_content":"\n当你在浏览器地址栏输入一个网址,敲下回车,是个人都知道接下来会发生什么------呈现一个网页,不管是正常显示,还是404,又或者是错误页面,总之就一个效果,显示一个网页出来.当然还有一种2B的行为,没有联网,不过还是会出来一个提示未联网的页面.\n\n那从么从输入一个网址到页面的呈现,会经历哪些过程呢?\n\n作为一个用户,或许没必要去了解这些.不过作为一个程序员,尤其是WEB程序员,这其中的点点滴滴就必须要去深究了.深入的去研究这些一方面可以让你在做性能优化的时候有更多的方面去考虑,另一方面这个也是面试经常会问到的问题.\n\n<!--more-->\n\n## 1. DNS------域名解析\n\n大千世界,人有千千万,唯一能识别一个人的标识就是身份证号码,他住哪?那就只有通过一个完整的地址能找到了.\n互联网中,计算机同样千千万,唯一能识别一台计算机的就是MAC地址.它在哪?IP所标识的就是它的地址所在.\n\n当你输入一个网址,浏览器首先会通过域名解析系统(DNS)解析成一个IP地址,这样才能确定我们需要请求的资源在哪里.当然,DNS解析的过程也是相当复杂的,或浏览器缓存(已经被解析过一次的,浏览器会有一段时间的缓存这个网址对应的IP地址),或者读取系统文件(系统缓存,host文件等),或者路由器缓存,或者真正的去解析了(递归搜索,域名都是顶级,二级,三级....等,浏览器会递归的去搜索到顶级域名,再开始解析成IP地址)...\n\n这个问题这里就不多说,总之一句话: 首先浏览器会把域名(也就是上面说到的网址)解析成一个IP地址.\n\n## 2. 建立连接------三次握手\n\n通过DNS解析已经得到我们需要的资源在哪里了,那么浏览器就可以通过TCP/IP协议向这个地址发送请求了.但是还需要三次握手才能确认可以通信.\n\n首先浏览器和服务器建立连接:\n\n**第一次握手**: 建立连接时，客户端发送syn(同步序列编号)包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认;\n**第二次握手**: 服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；\n**第三次握手**: 客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。\n\n就好比A和B要打电话要确认双方手机都没问题都能听到那么必须要三次对话:\n\nA: 能听到我说话么?\nB: 能听到,你能听到我说话么?\nA: 我也能听到.\n\nOK,这样才能确定双方都能收到并且都知道对方能收到.当然,这其中的复杂度我们这里也不去深究.\n\n## 3. 发送请求\n\n在确认浏览器能和服务器通信后,浏览器就需要向服务器发送请求,也就是告诉浏览器我需要什么.\n\n## 4. 服务器处理并响应\n\n服务器收到浏览器的请求后在首先会进行一些处理:\n\n- 如果没有浏览器需要的东西就重定向到404页面告诉浏览器: 不好意思,我这里没得你要的东西\n- 如果有缓存响应(返回)304等状态码给浏览器说: 你自己有这些东西,在你自己那里找\n- 如果处理的时候发生错误了重定向到500错误页告诉浏览器: 老子住院了,你要的东西过两天给你\n- 如果处理正常就返回html页面或者把(jsp,php)等动态页面生成html页面返回给浏览器: 你要的东西,拿好滚\n- ...等等,总之返回给浏览器一个html页面.\n\n## 5. 页面渲染\n\n### 5.1 解析HTML------DOM树\n\n浏览器在收到返回的html就会开始解析生成DOM树(DOM tree),对于看过数据结构的对树这个名词并不陌生，对编程中树这个名词不熟悉的可以想象成一颗真实的树，树根就是树的根节点，每一个分枝点都算一个节点，一个节点(A)分出一个或者多个节点(A1,A2,A3…)叫子节点，同样，相对于A1,A2…来说A叫父节点。\nHTML 中的每一个标签都是树中的一个节点，document就是树的根节点。DOM树包含了HTML所有标签，包括不可见的script等、display:none隐藏的标签等。\n\n### 5.2 解析CSS\n\n同时（相对于不同的浏览器5.1，5.2的顺序不一定是先解析HTML,再解析CSS），浏览器把所有样式（css）解析成结构体，在解析过程中，浏览器会干掉不能识别的样式，比如谷歌会干掉-moz-,-ms-,-o-等，css hach(加_、*、+)区别浏览器的css，另外还有就是写错的(例如width写成widht)等。\n\n### 5.3 DOM树附着CSS------呈现树\n\n完成之后浏览器会结合DOM树和样式结构体构建render tree(渲染树、呈现树)(这个过程chrome官方叫\"附着\")。render tree和DOM tree的区别在于：\n\n1. render tree能识别样式，每个节点中包含自己的样式。\n2. render tree不包含隐藏的节点，display:none的节点。但是visibility:hidden节点会包含在render tree中，因为它占有空间，会影响页面的布局和渲染。\n3. render tree不包含不呈现在页面中，不影响页面渲染的节点。如head这种。\n\n**根据CSS2的标准，render tree中的每个节点都称为Box (Box dimensions)，理解页面元素为一个具有填充、边距、边框和位置的盒子。**\n\n### 5.4 绘制页面\n\n一旦render tree构建完毕后，浏览器就可以根据render tree来绘制页面了。绘制页面浏览器首先会进行一个布局,只绘制元素影响布局的样式(margin,padding,width,height,border等),然后再进行页面颜色等样式的渲染.最后页面就呈现给用户咯.\n\n**PS: 本文只是个人理解,如有错误欢迎留言指正**\n\n","source":"_posts/front-end-browser-render.md","raw":"title: 输入网址到浏览器呈现页面的全过程\ndate: 2015-08-13 20:28:25\ntags: [前端综合]\ncategories: [前端综合]\nkeywords: 前端综合,页面呈现,dns,域名解析,DOM树,呈现树,三次握手,HTML解析\n---\n\n当你在浏览器地址栏输入一个网址,敲下回车,是个人都知道接下来会发生什么------呈现一个网页,不管是正常显示,还是404,又或者是错误页面,总之就一个效果,显示一个网页出来.当然还有一种2B的行为,没有联网,不过还是会出来一个提示未联网的页面.\n\n那从么从输入一个网址到页面的呈现,会经历哪些过程呢?\n\n作为一个用户,或许没必要去了解这些.不过作为一个程序员,尤其是WEB程序员,这其中的点点滴滴就必须要去深究了.深入的去研究这些一方面可以让你在做性能优化的时候有更多的方面去考虑,另一方面这个也是面试经常会问到的问题.\n\n<!--more-->\n\n## 1. DNS------域名解析\n\n大千世界,人有千千万,唯一能识别一个人的标识就是身份证号码,他住哪?那就只有通过一个完整的地址能找到了.\n互联网中,计算机同样千千万,唯一能识别一台计算机的就是MAC地址.它在哪?IP所标识的就是它的地址所在.\n\n当你输入一个网址,浏览器首先会通过域名解析系统(DNS)解析成一个IP地址,这样才能确定我们需要请求的资源在哪里.当然,DNS解析的过程也是相当复杂的,或浏览器缓存(已经被解析过一次的,浏览器会有一段时间的缓存这个网址对应的IP地址),或者读取系统文件(系统缓存,host文件等),或者路由器缓存,或者真正的去解析了(递归搜索,域名都是顶级,二级,三级....等,浏览器会递归的去搜索到顶级域名,再开始解析成IP地址)...\n\n这个问题这里就不多说,总之一句话: 首先浏览器会把域名(也就是上面说到的网址)解析成一个IP地址.\n\n## 2. 建立连接------三次握手\n\n通过DNS解析已经得到我们需要的资源在哪里了,那么浏览器就可以通过TCP/IP协议向这个地址发送请求了.但是还需要三次握手才能确认可以通信.\n\n首先浏览器和服务器建立连接:\n\n**第一次握手**: 建立连接时，客户端发送syn(同步序列编号)包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认;\n**第二次握手**: 服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；\n**第三次握手**: 客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。\n\n就好比A和B要打电话要确认双方手机都没问题都能听到那么必须要三次对话:\n\nA: 能听到我说话么?\nB: 能听到,你能听到我说话么?\nA: 我也能听到.\n\nOK,这样才能确定双方都能收到并且都知道对方能收到.当然,这其中的复杂度我们这里也不去深究.\n\n## 3. 发送请求\n\n在确认浏览器能和服务器通信后,浏览器就需要向服务器发送请求,也就是告诉浏览器我需要什么.\n\n## 4. 服务器处理并响应\n\n服务器收到浏览器的请求后在首先会进行一些处理:\n\n- 如果没有浏览器需要的东西就重定向到404页面告诉浏览器: 不好意思,我这里没得你要的东西\n- 如果有缓存响应(返回)304等状态码给浏览器说: 你自己有这些东西,在你自己那里找\n- 如果处理的时候发生错误了重定向到500错误页告诉浏览器: 老子住院了,你要的东西过两天给你\n- 如果处理正常就返回html页面或者把(jsp,php)等动态页面生成html页面返回给浏览器: 你要的东西,拿好滚\n- ...等等,总之返回给浏览器一个html页面.\n\n## 5. 页面渲染\n\n### 5.1 解析HTML------DOM树\n\n浏览器在收到返回的html就会开始解析生成DOM树(DOM tree),对于看过数据结构的对树这个名词并不陌生，对编程中树这个名词不熟悉的可以想象成一颗真实的树，树根就是树的根节点，每一个分枝点都算一个节点，一个节点(A)分出一个或者多个节点(A1,A2,A3…)叫子节点，同样，相对于A1,A2…来说A叫父节点。\nHTML 中的每一个标签都是树中的一个节点，document就是树的根节点。DOM树包含了HTML所有标签，包括不可见的script等、display:none隐藏的标签等。\n\n### 5.2 解析CSS\n\n同时（相对于不同的浏览器5.1，5.2的顺序不一定是先解析HTML,再解析CSS），浏览器把所有样式（css）解析成结构体，在解析过程中，浏览器会干掉不能识别的样式，比如谷歌会干掉-moz-,-ms-,-o-等，css hach(加_、*、+)区别浏览器的css，另外还有就是写错的(例如width写成widht)等。\n\n### 5.3 DOM树附着CSS------呈现树\n\n完成之后浏览器会结合DOM树和样式结构体构建render tree(渲染树、呈现树)(这个过程chrome官方叫\"附着\")。render tree和DOM tree的区别在于：\n\n1. render tree能识别样式，每个节点中包含自己的样式。\n2. render tree不包含隐藏的节点，display:none的节点。但是visibility:hidden节点会包含在render tree中，因为它占有空间，会影响页面的布局和渲染。\n3. render tree不包含不呈现在页面中，不影响页面渲染的节点。如head这种。\n\n**根据CSS2的标准，render tree中的每个节点都称为Box (Box dimensions)，理解页面元素为一个具有填充、边距、边框和位置的盒子。**\n\n### 5.4 绘制页面\n\n一旦render tree构建完毕后，浏览器就可以根据render tree来绘制页面了。绘制页面浏览器首先会进行一个布局,只绘制元素影响布局的样式(margin,padding,width,height,border等),然后再进行页面颜色等样式的渲染.最后页面就呈现给用户咯.\n\n**PS: 本文只是个人理解,如有错误欢迎留言指正**\n\n","slug":"front-end-browser-render","published":1,"updated":"2015-08-15T08:24:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cidicr6ug001jzy6fe5zfghh3"},{"title":"IE rgba兼容问题","date":"2015-08-08T04:06:17.000Z","keywords":"css,ie,兼容性,rgba,透明度","_content":"\n`CSS`透明度设置有`opacity`,`IE`有滤镜`filter:alpha()`,那`rgba`也是设置透明度的,有什么用呢?\n\n`opacity`,`IE`的`filter:alpha()`透明度设置会让子元素继承其透明度,但是在实际项目中中,往往更多的是不想要其透明度被继承.当然,这个可以通过用定位而不直接写在透明元素里面解决透明度继承问题,但是定位始终不是一个好的布局方式.\n\n**非`IE`浏览器**可以设计背景色用`rgba(R,G,B,A)`,其中R,G,B分别是0-255数字或者用百分比表示，A是0-1的数字，0表示全透明，1表示正常显示.但是人神共愤的`IE`并不支持这玩意.不过`IE`也有它可爱的一面------滤镜.\n\n<!--more-->\n\n``` css\nfilter:progid:DXImageTransform.Microsoft.gradient(startcolorstr=#AARRGGBB,endcolorstr=#AARRGGBB)\n```\n这本身是一个`IE`渐变的滤镜.不过我们把渐变的`startcolorstr`和`endcolorstr`设置为一样的,那就不存在渐变的效果了.其中`RRGGBB`是(0-255)十六进制的RGB值,但是透明度`AA`也是(0-255)十六进制,所以需要转换以下,比如0.5的透明度需要转换为255*0.5取整再转换为十六进制.","source":"_posts/css-ie-rgba.md","raw":"title: IE rgba兼容问题\ndate: 2015-08-08 12:06:17\ntags: [css,ie,兼容性,rgba,透明度]\ncategories: [css/css3,兼容性]\nkeywords: css,ie,兼容性,rgba,透明度\n---\n\n`CSS`透明度设置有`opacity`,`IE`有滤镜`filter:alpha()`,那`rgba`也是设置透明度的,有什么用呢?\n\n`opacity`,`IE`的`filter:alpha()`透明度设置会让子元素继承其透明度,但是在实际项目中中,往往更多的是不想要其透明度被继承.当然,这个可以通过用定位而不直接写在透明元素里面解决透明度继承问题,但是定位始终不是一个好的布局方式.\n\n**非`IE`浏览器**可以设计背景色用`rgba(R,G,B,A)`,其中R,G,B分别是0-255数字或者用百分比表示，A是0-1的数字，0表示全透明，1表示正常显示.但是人神共愤的`IE`并不支持这玩意.不过`IE`也有它可爱的一面------滤镜.\n\n<!--more-->\n\n``` css\nfilter:progid:DXImageTransform.Microsoft.gradient(startcolorstr=#AARRGGBB,endcolorstr=#AARRGGBB)\n```\n这本身是一个`IE`渐变的滤镜.不过我们把渐变的`startcolorstr`和`endcolorstr`设置为一样的,那就不存在渐变的效果了.其中`RRGGBB`是(0-255)十六进制的RGB值,但是透明度`AA`也是(0-255)十六进制,所以需要转换以下,比如0.5的透明度需要转换为255*0.5取整再转换为十六进制.","slug":"css-ie-rgba","published":1,"updated":"2015-08-08T06:58:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cidicr6uj001ozy6fyvzqpk7e"}],"PostAsset":[],"PostCategory":[{"post_id":"cidicr6sz0001zy6f3l55s5n1","category_id":"cidicr6t80002zy6fp9s8ic6k","_id":"cidicr6td0007zy6f3row9tfc"},{"post_id":"cidicr6sz0001zy6f3l55s5n1","category_id":"cidicr6tb0005zy6fr8l6z0i1","_id":"cidicr6td0008zy6f635aq173"},{"post_id":"cidicr6tg000ezy6fb9pc8qt2","category_id":"cidicr6t80002zy6fp9s8ic6k","_id":"cidicr6ti000fzy6fomq290kt"},{"post_id":"cidicr6tg000ezy6fb9pc8qt2","category_id":"cidicr6tb0005zy6fr8l6z0i1","_id":"cidicr6tj000hzy6f5f492bf4"},{"post_id":"cidicr6tl000lzy6f3swuic2w","category_id":"cidicr6t80002zy6fp9s8ic6k","_id":"cidicr6tn000pzy6fxwzxn7z5"},{"post_id":"cidicr6tl000lzy6f3swuic2w","category_id":"cidicr6tm000mzy6fm15n7iys","_id":"cidicr6tn000rzy6fsd9qj17n"},{"post_id":"cidicr6u7000szy6f6quz3r7e","category_id":"cidicr6t80002zy6fp9s8ic6k","_id":"cidicr6u8000tzy6fdcqmyhqd"},{"post_id":"cidicr6u7000szy6f6quz3r7e","category_id":"cidicr6tb0005zy6fr8l6z0i1","_id":"cidicr6u9000vzy6fl41ia9lz"},{"post_id":"cidicr6ua000zzy6fsu961div","category_id":"cidicr6t80002zy6fp9s8ic6k","_id":"cidicr6uc0013zy6flpzwn8n3"},{"post_id":"cidicr6ua000zzy6fsu961div","category_id":"cidicr6ub0010zy6fec7j5dzf","_id":"cidicr6uc0014zy6fda6c52es"},{"post_id":"cidicr6ue0018zy6ffkcuvvi0","category_id":"cidicr6ue0019zy6f5iu0jia8","_id":"cidicr6uf001ezy6fabyunu7k"},{"post_id":"cidicr6ue0018zy6ffkcuvvi0","category_id":"cidicr6uf001czy6fc6fhj9jc","_id":"cidicr6uf001fzy6f75krv5fy"},{"post_id":"cidicr6ug001jzy6fe5zfghh3","category_id":"cidicr6uh001kzy6fm3532rze","_id":"cidicr6ui001nzy6f27lb6e5i"},{"post_id":"cidicr6uj001ozy6fyvzqpk7e","category_id":"cidicr6uk001pzy6fi27yxcf9","_id":"cidicr6ul001uzy6f41p8cy2e"},{"post_id":"cidicr6uj001ozy6fyvzqpk7e","category_id":"cidicr6uk001szy6frrfiih29","_id":"cidicr6ul001vzy6fco2sc3ee"}],"PostTag":[{"post_id":"cidicr6sz0001zy6f3l55s5n1","tag_id":"cidicr6t80003zy6fg8sp8puw","_id":"cidicr6te000azy6foevckoy3"},{"post_id":"cidicr6sz0001zy6f3l55s5n1","tag_id":"cidicr6ta0004zy6fc7kjriau","_id":"cidicr6te000bzy6fheqxxab8"},{"post_id":"cidicr6sz0001zy6f3l55s5n1","tag_id":"cidicr6tc0006zy6ffyjpxuzm","_id":"cidicr6te000czy6fqtivjxfl"},{"post_id":"cidicr6sz0001zy6f3l55s5n1","tag_id":"cidicr6td0009zy6f2f1uaztk","_id":"cidicr6te000dzy6fnp4am5hu"},{"post_id":"cidicr6tg000ezy6fb9pc8qt2","tag_id":"cidicr6t80003zy6fg8sp8puw","_id":"cidicr6tj000izy6f4ct7t8pd"},{"post_id":"cidicr6tg000ezy6fb9pc8qt2","tag_id":"cidicr6ta0004zy6fc7kjriau","_id":"cidicr6tj000jzy6fnwdo0kip"},{"post_id":"cidicr6tg000ezy6fb9pc8qt2","tag_id":"cidicr6tj000gzy6fiyjsoaxr","_id":"cidicr6tj000kzy6fbps3rcdi"},{"post_id":"cidicr6tl000lzy6f3swuic2w","tag_id":"cidicr6t80003zy6fg8sp8puw","_id":"cidicr6tn000ozy6fl62gswt7"},{"post_id":"cidicr6tl000lzy6f3swuic2w","tag_id":"cidicr6tm000nzy6fm55462z8","_id":"cidicr6tn000qzy6fzehrti2o"},{"post_id":"cidicr6u7000szy6f6quz3r7e","tag_id":"cidicr6t80003zy6fg8sp8puw","_id":"cidicr6u9000wzy6fdq6rvybl"},{"post_id":"cidicr6u7000szy6f6quz3r7e","tag_id":"cidicr6u8000uzy6fqcl6w129","_id":"cidicr6u9000xzy6f0e8x00um"},{"post_id":"cidicr6u7000szy6f6quz3r7e","tag_id":"cidicr6ta0004zy6fc7kjriau","_id":"cidicr6u9000yzy6fzqa7th7m"},{"post_id":"cidicr6ua000zzy6fsu961div","tag_id":"cidicr6t80003zy6fg8sp8puw","_id":"cidicr6uc0015zy6fz2fdlguu"},{"post_id":"cidicr6ua000zzy6fsu961div","tag_id":"cidicr6ub0011zy6f3e4qs1mm","_id":"cidicr6ud0016zy6fzim5sugf"},{"post_id":"cidicr6ua000zzy6fsu961div","tag_id":"cidicr6uc0012zy6f3klteppt","_id":"cidicr6ud0017zy6fvfouh4x0"},{"post_id":"cidicr6ue0018zy6ffkcuvvi0","tag_id":"cidicr6ue001azy6fwwvd5sov","_id":"cidicr6uf001gzy6fvkxudrbp"},{"post_id":"cidicr6ue0018zy6ffkcuvvi0","tag_id":"cidicr6uf001bzy6fol7t1bz0","_id":"cidicr6ug001hzy6fy1k0nnp5"},{"post_id":"cidicr6ue0018zy6ffkcuvvi0","tag_id":"cidicr6uf001dzy6fg335y4pu","_id":"cidicr6ug001izy6fndjrj5tx"},{"post_id":"cidicr6ug001jzy6fe5zfghh3","tag_id":"cidicr6uh001lzy6fmitxcute","_id":"cidicr6ui001mzy6fhltsokzl"},{"post_id":"cidicr6uj001ozy6fyvzqpk7e","tag_id":"cidicr6uk001qzy6fazrqcyli","_id":"cidicr6ul001yzy6f1sacbdva"},{"post_id":"cidicr6uj001ozy6fyvzqpk7e","tag_id":"cidicr6uk001rzy6fnl1i4g9x","_id":"cidicr6um001zzy6fx0foab72"},{"post_id":"cidicr6uj001ozy6fyvzqpk7e","tag_id":"cidicr6ul001tzy6f27aqy4hp","_id":"cidicr6um0020zy6fs23cuelo"},{"post_id":"cidicr6uj001ozy6fyvzqpk7e","tag_id":"cidicr6ul001wzy6fynwgpqxn","_id":"cidicr6um0021zy6fe9p2yp73"},{"post_id":"cidicr6uj001ozy6fyvzqpk7e","tag_id":"cidicr6ul001xzy6fku9jhwul","_id":"cidicr6um0022zy6f4u8yzhib"}],"Tag":[{"name":"js","_id":"cidicr6t80003zy6fg8sp8puw"},{"name":"代码优化","_id":"cidicr6ta0004zy6fc7kjriau"},{"name":"运算符","_id":"cidicr6tc0006zy6ffyjpxuzm"},{"name":"条件选择","_id":"cidicr6td0009zy6f2f1uaztk"},{"name":"事件委托","_id":"cidicr6tj000gzy6fiyjsoaxr"},{"name":"数据类型","_id":"cidicr6tm000nzy6fm55462z8"},{"name":"位运算","_id":"cidicr6u8000uzy6fqcl6w129"},{"name":"js的艺术","_id":"cidicr6ub0011zy6f3e4qs1mm"},{"name":"面试题","_id":"cidicr6uc0012zy6f3klteppt"},{"name":"html","_id":"cidicr6ue001azy6fwwvd5sov"},{"name":"hash","_id":"cidicr6uf001bzy6fol7t1bz0"},{"name":"ajax","_id":"cidicr6uf001dzy6fg335y4pu"},{"name":"前端综合","_id":"cidicr6uh001lzy6fmitxcute"},{"name":"css","_id":"cidicr6uk001qzy6fazrqcyli"},{"name":"ie","_id":"cidicr6uk001rzy6fnl1i4g9x"},{"name":"兼容性","_id":"cidicr6ul001tzy6f27aqy4hp"},{"name":"rgba","_id":"cidicr6ul001wzy6fynwgpqxn"},{"name":"透明度","_id":"cidicr6ul001xzy6fku9jhwul"}]}}