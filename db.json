{"meta":{"version":1,"warehouse":"1.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0},{"_id":"themes/landscape/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":0},{"_id":"themes/landscape/source/favicon.png","path":"favicon.png","modified":0},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0},{"_id":"themes/landscape/source/css/images/banner.png","path":"css/images/banner.png","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0}],"Cache":[{"_id":"source/CNAME","shasum":"45ae701d6392c3a64325828f8462d3b1ddd96d3f","modified":1439000616000},{"_id":"source/_posts/css-ie-rgba.md","shasum":"b90ab0190a0e263d855d19490f1aeb774bafc4ff","modified":1439017133000},{"_id":"source/_posts/html-hashtag.md","shasum":"99c22d4870f82df22a8849faf75803285073a78b","modified":1439019646000},{"_id":"source/_posts/js-bit-operation.md","shasum":"fc2cbc5b91365aa652fcffd7e55157b47329317b","modified":1439211495000},{"_id":"source/_posts/js-event-delegate.md","shasum":"8f8dd201ba94e79c5d7db2a4d3c5782301f22791","modified":1439017146000},{"_id":"source/_posts/js-or-and-operator.md","shasum":"ee27f3e3cd4f546e34f66e38d5be6f28aab7ed9f","modified":1439017153000},{"_id":"themes/landscape/Gruntfile.js","shasum":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1438766831000},{"_id":"themes/landscape/LICENSE","shasum":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1438766831000},{"_id":"themes/landscape/README.md","shasum":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1438766831000},{"_id":"themes/landscape/_config.yml","shasum":"607d820657d0bef619c001f21f063a7bc6826291","modified":1439017061000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","shasum":"c08a5efd44a88995a9d618a2143a5de0e04d4f8a","modified":1438960893000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","shasum":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1438766831000},{"_id":"themes/landscape/layout/_partial/archive.ejs","shasum":"d7de6421497ffaf65e4f5fe4bed71fcea51fde80","modified":1438766831000},{"_id":"themes/landscape/layout/_partial/article.ejs","shasum":"c4188a72cd6ec7ba3b935c43ef11ce07293c7d97","modified":1439089739000},{"_id":"themes/landscape/layout/_partial/footer.ejs","shasum":"4b19c1080c9e6c2acd922a88ed29d183a3b5bc09","modified":1438766831000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","shasum":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1438766831000},{"_id":"themes/landscape/layout/_partial/head.ejs","shasum":"635cfa297f267fa510313448752fc8c4916e5e36","modified":1439004216000},{"_id":"themes/landscape/layout/_partial/header.ejs","shasum":"28b71f96de6aa17dbdce74c7c204be8bd1990d49","modified":1438961902000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","shasum":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1438766831000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","shasum":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1439015497000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","shasum":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1438766831000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","shasum":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1438766831000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","shasum":"7c46491ac29294689e47aaaf29240addf6927fd7","modified":1439015599000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","shasum":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1438766831000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","shasum":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1439089122000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","shasum":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1438766831000},{"_id":"themes/landscape/layout/_widget/archive.ejs","shasum":"6e584313ceb8a1599ec320588e9ce203ca35dcc4","modified":1439016854000},{"_id":"themes/landscape/layout/_widget/category.ejs","shasum":"59baefd4b9242a941c32a0b553d8a9591acb3fbc","modified":1439016798000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","shasum":"a10d28fddb8365342882ea4ee2660a3947278735","modified":1439016816000},{"_id":"themes/landscape/layout/_widget/tag.ejs","shasum":"1ae755002b2aaab71c5885d64fe7885f0d66e21a","modified":1439015395000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","shasum":"3f431b2a42d1e850ce2089ffdb97efa66f92c398","modified":1439016824000},{"_id":"themes/landscape/layout/_widget/tenfour.ejs","shasum":"a4f8ad14967185ef5f0edb2cf4c9b73f276d5a7e","modified":1439016829000},{"_id":"themes/landscape/layout/archive.ejs","shasum":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1438766831000},{"_id":"themes/landscape/layout/category.ejs","shasum":"765426a9c8236828dc34759e604cc2c52292835a","modified":1438766831000},{"_id":"themes/landscape/layout/index.ejs","shasum":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1438766831000},{"_id":"themes/landscape/layout/layout.ejs","shasum":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1438766831000},{"_id":"themes/landscape/layout/page.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1438766831000},{"_id":"themes/landscape/layout/post.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1438766831000},{"_id":"themes/landscape/layout/tag.ejs","shasum":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1438766831000},{"_id":"themes/landscape/package.json","shasum":"85358dc34311c6662e841584e206a4679183943f","modified":1438766831000},{"_id":"themes/landscape/scripts/fancybox.js","shasum":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1438766831000},{"_id":"themes/landscape/source/css/_extend.styl","shasum":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1438766831000},{"_id":"themes/landscape/source/css/_partial/archive.styl","shasum":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1438766831000},{"_id":"themes/landscape/source/css/_partial/comment.styl","shasum":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1438766831000},{"_id":"themes/landscape/source/css/_partial/article.styl","shasum":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1438766831000},{"_id":"themes/landscape/source/css/_partial/footer.styl","shasum":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1438766831000},{"_id":"themes/landscape/source/css/_partial/header.styl","shasum":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1438766831000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","shasum":"36eefe6332b86b66023a9884b754d305235846b4","modified":1438766831000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","shasum":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1438766831000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","shasum":"890349df5145abf46ce7712010c89237900b3713","modified":1438766831000},{"_id":"themes/landscape/source/css/_util/grid.styl","shasum":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1438766831000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","shasum":"bc5487b9a0bfe5f745423331824d3f3637ccd430","modified":1438766831000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","shasum":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1438766831000},{"_id":"themes/landscape/source/css/_util/mixin.styl","shasum":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1438766831000},{"_id":"themes/landscape/source/css/_variables.styl","shasum":"d654762b69894285f102c3c47d9824e006417a09","modified":1438960029000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","shasum":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1438766831000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1438766831000},{"_id":"themes/landscape/source/css/style.styl","shasum":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1438766831000},{"_id":"themes/landscape/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1438766831000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","shasum":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1438766831000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1438766831000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1438766831000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1438766831000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1438766831000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1438766831000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1438766831000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1438766831000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1438766831000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1438766831000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1438766831000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1438766831000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1438766831000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1438766831000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1438766831000},{"_id":"themes/landscape/source/favicon.png","shasum":"92c4320ad6ebaee0ae7720e8c9bbf6843e823259","modified":1439200763000},{"_id":"themes/landscape/source/js/script.js","shasum":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1438766831000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1438766831000},{"_id":"themes/landscape/source/js/jquery-2.0.3.min.js","shasum":"a9e46273f3161bc876825ac2792f61f117eb7829","modified":1439015552000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","shasum":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1438766831000},{"_id":"themes/landscape/source/css/images/banner.png","shasum":"5e2ceae6eb71b5d921670a7b8d177225a89faf5f","modified":1438959933000},{"_id":"public/2015/08/10/js-bit-operation/index.html","modified":1439211516567,"shasum":"be15e98f91e4abdf006106ce06c514ebf4962534"},{"_id":"public/2015/08/08/html-hashtag/index.html","modified":1439211516587,"shasum":"355a0eb7eb3a4fa49cee03572984ceee714c1571"},{"_id":"public/2015/08/08/css-ie-rgba/index.html","modified":1439211516593,"shasum":"4afb54929200bbae3fe19c1d1951b610b2a6ab5c"},{"_id":"public/2015/08/08/js-event-delegate/index.html","modified":1439211516601,"shasum":"5846c2f365dd8b97a41d7cfb3acd22dbcdc299a2"},{"_id":"public/2015/08/08/js-or-and-operator/index.html","modified":1439211516609,"shasum":"6beca9ce111bfc1122dd048a9f5e0b327cf6426b"},{"_id":"public/archives/index.html","modified":1439211516620,"shasum":"eda711b5de152cf1cb4412f9db5c00b7e31ff2dc"},{"_id":"public/archives/2015/index.html","modified":1439211516627,"shasum":"419df22cd8333ab9ac4b8bd06eacd536b19db832"},{"_id":"public/archives/2015/08/index.html","modified":1439211516637,"shasum":"f43e3598c6703d9cbd6e48c6e65206e83a2a400f"},{"_id":"public/categories/javascript/index.html","modified":1439211516643,"shasum":"76571eaf5ed3985a6f2c12c6f437f89fe89d54ea"},{"_id":"public/categories/javascript/代码优化/index.html","modified":1439211516649,"shasum":"4d6c23dd51b3edc9404719f0746414ada8537d87"},{"_id":"public/categories/html-html5/index.html","modified":1439211516654,"shasum":"4b71aee5079569291eaeed36c775db057732919a"},{"_id":"public/categories/html-html5/url/index.html","modified":1439211516662,"shasum":"99be3cc97d28b8b73eb030435ac5b5ddd5b91b6b"},{"_id":"public/categories/css-css3/index.html","modified":1439211516667,"shasum":"acd6d5a61c6b7959596b9fd3ebbae5eacef8cc2d"},{"_id":"public/categories/css-css3/兼容性/index.html","modified":1439211516671,"shasum":"bc55d3ef8b8084ab02aabca9756b0b0e803cd0d0"},{"_id":"public/index.html","modified":1439211516682,"shasum":"ebf541864963d09d6d65a6d95dd7082c24bb0c3b"},{"_id":"public/tags/js/index.html","modified":1439211516687,"shasum":"6d201c1602b3550d65a84e0928c3f7b07118f9b4"},{"_id":"public/tags/代码优化/index.html","modified":1439211516693,"shasum":"b07410e686a254bf83072ab1e5ccf82a319d6e7b"},{"_id":"public/tags/运算符/index.html","modified":1439211516697,"shasum":"d41c8d75dd00c98996f2c028794c651d9b31b430"},{"_id":"public/tags/条件选择/index.html","modified":1439211516703,"shasum":"45011562a0934613d3b1374eb3b0e34dda3190d3"},{"_id":"public/tags/事件委托/index.html","modified":1439211516708,"shasum":"47394c6756ab14e51466d7a480cc99d5efc67a9c"},{"_id":"public/tags/位运算/index.html","modified":1439211516711,"shasum":"24dcce8b580f54b291b19526dd64006cc9abc666"},{"_id":"public/tags/html/index.html","modified":1439211516715,"shasum":"78fe1b41719835286a080edad2752f63fded641c"},{"_id":"public/tags/hash/index.html","modified":1439211516719,"shasum":"d8292535fdfec2b34b47e4984d172ba3b2ff6479"},{"_id":"public/tags/ajax/index.html","modified":1439211516722,"shasum":"57eccd2e33cc5bd014ccea1688e380c9c8cb7ad3"},{"_id":"public/tags/css/index.html","modified":1439211516725,"shasum":"d44ccdb5ebdd38d03e1386a98dadc26d6dda664b"},{"_id":"public/tags/ie/index.html","modified":1439211516730,"shasum":"69425ba878b35b7efc3a53bd5d9223ca2f945b01"},{"_id":"public/tags/兼容性/index.html","modified":1439211516739,"shasum":"a454643b1678ae92e10118841d011d15f2e17a9a"},{"_id":"public/tags/rgba/index.html","modified":1439211516743,"shasum":"dc7b96b6d3fda0b29758f145500bbe974ce21028"},{"_id":"public/tags/透明度/index.html","modified":1439211516747,"shasum":"823a9e9498bc26ca3bd2a107ae859b541577aa52"}],"Category":[{"name":"javascript","_id":"cid5tpx9u0001thze9hl6ctfy"},{"name":"代码优化","parent":"cid5tpx9u0001thze9hl6ctfy","_id":"cid5tpx9w0004thzekbp4jk07"},{"name":"html/html5","_id":"cid5tpxay000sthze0uy1c49o"},{"name":"url","parent":"cid5tpxay000sthze0uy1c49o","_id":"cid5tpxaz000vthzeqooa8zsz"},{"name":"css/css3","_id":"cid5tpxba0013thzescgtxs5p"},{"name":"兼容性","parent":"cid5tpxba0013thzescgtxs5p","_id":"cid5tpxbc0016thzewlmol796"}],"Data":[],"Page":[],"Post":[{"title":"JS巧妙运用||和&&运算符优化条件选择代码","date":"2015-08-08T02:48:09.000Z","keywords":"javascripts,js,逻辑运算符,代码优化,条件选择","_content":"\n&& 和 || 和其他编程语言一样，在`js`中同样是一个双目逻辑运算符，执行逻辑运算与和或。往往计算机在执行这两个逻辑运算的时候会有一个\"惰性\"的思维:\n\n1. 在执行 `exp1 && exp2 && ... && expn`的时候,会从左到右依次判断表达式1,表达式2,...,表达式n,直到遇到第一个为`false`的时候,其表达式整体运算结果必定为`false`,那么后面的所有表达式都不会执行了;\n2. 在执行 `exp1 || exp2 || ... || expn`会从左到右以此判断表达式1,表达式2,...,表达式n,直到遇到第一个为`true`的时候,其表达式整体运算结果必定为`true`,那么后面的所有表达式都不会执行了.\n\n那么,我们就可以利用这两点来简化代码中的`if...else`条件选择或者`?:`三目运算.来看下面的例子:\n<!--more-->\n\n经常会遇到当条件成立时候执行某个函数或者当条件不成立的时候执行某个函数,以前我们会写成这样:\n\n```js\n// 如果表表达式exp结果为true执行函数fun\nif( exp ) {\n  fun();\n}\n\n// 如果表达式exp结果为false执行函数fun\nif( !exp ) {\n  fun();\n}\n```\n那么现在我们可以写成:\n```\n/** 如果表达式exp结果为true执行函数fun\n* 根据上面第一条,如果exp表达式结果为false,那么结果必定为false,所以就不会执行fun\n* 反之,exp为true的时候,不能判断整体结果为true还是false,所以计算机会继续执行fun\n*/\nexp && fun();\n\n/** 如果表达式exp结果为false执行函数fun\n* 根据上面第二条,如果exp表达式结果为true,那么结果必定为true,所以就不会执行fun\n* 反之,exp为false的时候,不能判断整体结果为ture还是false,所以计算机会继续执行fun\n*/\nexp || fun();\n```","source":"_posts/js-or-and-operator.md","raw":"title: JS巧妙运用||和&&运算符优化条件选择代码\ndate: 2015-08-08 10:48:09\ntags: [js,代码优化,运算符,条件选择]\ncategories: [javascript,代码优化]\nkeywords: javascripts,js,逻辑运算符,代码优化,条件选择\n---\n\n&& 和 || 和其他编程语言一样，在`js`中同样是一个双目逻辑运算符，执行逻辑运算与和或。往往计算机在执行这两个逻辑运算的时候会有一个\"惰性\"的思维:\n\n1. 在执行 `exp1 && exp2 && ... && expn`的时候,会从左到右依次判断表达式1,表达式2,...,表达式n,直到遇到第一个为`false`的时候,其表达式整体运算结果必定为`false`,那么后面的所有表达式都不会执行了;\n2. 在执行 `exp1 || exp2 || ... || expn`会从左到右以此判断表达式1,表达式2,...,表达式n,直到遇到第一个为`true`的时候,其表达式整体运算结果必定为`true`,那么后面的所有表达式都不会执行了.\n\n那么,我们就可以利用这两点来简化代码中的`if...else`条件选择或者`?:`三目运算.来看下面的例子:\n<!--more-->\n\n经常会遇到当条件成立时候执行某个函数或者当条件不成立的时候执行某个函数,以前我们会写成这样:\n\n```js\n// 如果表表达式exp结果为true执行函数fun\nif( exp ) {\n  fun();\n}\n\n// 如果表达式exp结果为false执行函数fun\nif( !exp ) {\n  fun();\n}\n```\n那么现在我们可以写成:\n```\n/** 如果表达式exp结果为true执行函数fun\n* 根据上面第一条,如果exp表达式结果为false,那么结果必定为false,所以就不会执行fun\n* 反之,exp为true的时候,不能判断整体结果为true还是false,所以计算机会继续执行fun\n*/\nexp && fun();\n\n/** 如果表达式exp结果为false执行函数fun\n* 根据上面第二条,如果exp表达式结果为true,那么结果必定为true,所以就不会执行fun\n* 反之,exp为false的时候,不能判断整体结果为ture还是false,所以计算机会继续执行fun\n*/\nexp || fun();\n```","slug":"js-or-and-operator","published":1,"updated":"2015-08-08T06:59:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cid5tpx9p0000thzei8o8twpm"},{"title":"js事件委托","date":"2015-08-08T03:28:36.000Z","keywords":"javascript,js,代码优化,事件委托","_content":"\n## 什么是事件委托\n事件就是指`js`中的`onclick`,`onmouseout`,`onmousemove`,等事件,委托就是自己的事件,让别人去做.也就是说利用`js`的事件冒泡的原理,父级委托自己的子元素来完成事件,那有什么好处呢?\n\n1. 避免循环,提高性能;\n2. 可以让后来通过`js`生成同类元素也能具有事先添加的事件功能.\n\n体我们可以来看下面的例子:\n<!--more-->\n有以下`html`代码片段,添加函数使点击`li`的时候`alert`其中的`html`:\n\n``` html\n<ul id=\"ul\">\n  <li>1</li>\n  <li>2</li>\n  <li>3</li>\n  <li>4</li>\n</ul>\n```\n一般来说都会这样写:\n\n``` js\nvar oUl = document.getElementById('ul');\nvar aLi = oUl.getElementsByTagName('li');\nfor( var i = 0; i < aLi.length; i++ ) {\n  aLi[i].onclick = function() {\n    //这里用this而不用aLi[i].innerHTML,有兴趣的朋友可以去试一下这种写法会出现什么问题.\n    alert(this.innerHTML);\n  }\n}\n```\n\n那事件委托了?我们可以这样写:\n``` js\nvar oUl = document.getElementById(\"ul\");\noUl.onclick = function(ev){\n  ev = ev || window.event;\n\n  // 获取点击的事件源\n  tar = ev.target || ev.srcElement;\n  \n  // 判断事件源是否为li元素\n  if(tar.nodeName.toUpperCase() == 'LI') {\n    alert(tar.innerHTML);\n  }\n}\n```\n\n可以看出来.下面这种事件委托的写法还比传统写法多几行代码,那么这么写有什么好处了?\n\n## 好处一:避免循环,提高性能\n\n可以看出来下面这种写法没用到循环,循环所消耗的性能是众所周知的,尤为是在真正的项目中,一般都不会想例子中这样3,4个元素而已.当然,如果使用`jquery`另当别论,但是同样会存在元素选择的时候的性能问题.具体看后面`jQuery`事件委托.\n\n## 好处二:可以让后来通过`js`生成同类元素也能具有事先添加的事件功能.\n\n把以下代码分别加在上面两段`js`代码后面:\n\n``` js\nvar oLi = document.createElement('li');\noLi.createTextNode('5');\noUl.appendChild(oLi);\n```\n该段代码动态创建一个`<li>5</li>`加在最后面,在上面两个事件添加的情况下分别测试,传统循环添加的是不会有该事件的,但是通过事件委托的方式添加事件有该事件,能够`alert(5)`.\n\n## jQuery事件委托添加\n\n方式1: \n```js\n// live这个方法在1.8左右以后的版本貌似已经被抛弃了\n$('#ul li').live('click',function(){\n  alert($(this).html());\n});\n```\n\n方式2:\n``` js\n$('#ul').on('click','li',function(){\n  alert($(this).html());\n});\n```","source":"_posts/js-event-delegate.md","raw":"title: js事件委托\ndate: 2015-08-08 11:28:36\ntags: [js,代码优化,事件委托]\ncategories: [javascript,代码优化]\nkeywords: javascript,js,代码优化,事件委托\n---\n\n## 什么是事件委托\n事件就是指`js`中的`onclick`,`onmouseout`,`onmousemove`,等事件,委托就是自己的事件,让别人去做.也就是说利用`js`的事件冒泡的原理,父级委托自己的子元素来完成事件,那有什么好处呢?\n\n1. 避免循环,提高性能;\n2. 可以让后来通过`js`生成同类元素也能具有事先添加的事件功能.\n\n体我们可以来看下面的例子:\n<!--more-->\n有以下`html`代码片段,添加函数使点击`li`的时候`alert`其中的`html`:\n\n``` html\n<ul id=\"ul\">\n  <li>1</li>\n  <li>2</li>\n  <li>3</li>\n  <li>4</li>\n</ul>\n```\n一般来说都会这样写:\n\n``` js\nvar oUl = document.getElementById('ul');\nvar aLi = oUl.getElementsByTagName('li');\nfor( var i = 0; i < aLi.length; i++ ) {\n  aLi[i].onclick = function() {\n    //这里用this而不用aLi[i].innerHTML,有兴趣的朋友可以去试一下这种写法会出现什么问题.\n    alert(this.innerHTML);\n  }\n}\n```\n\n那事件委托了?我们可以这样写:\n``` js\nvar oUl = document.getElementById(\"ul\");\noUl.onclick = function(ev){\n  ev = ev || window.event;\n\n  // 获取点击的事件源\n  tar = ev.target || ev.srcElement;\n  \n  // 判断事件源是否为li元素\n  if(tar.nodeName.toUpperCase() == 'LI') {\n    alert(tar.innerHTML);\n  }\n}\n```\n\n可以看出来.下面这种事件委托的写法还比传统写法多几行代码,那么这么写有什么好处了?\n\n## 好处一:避免循环,提高性能\n\n可以看出来下面这种写法没用到循环,循环所消耗的性能是众所周知的,尤为是在真正的项目中,一般都不会想例子中这样3,4个元素而已.当然,如果使用`jquery`另当别论,但是同样会存在元素选择的时候的性能问题.具体看后面`jQuery`事件委托.\n\n## 好处二:可以让后来通过`js`生成同类元素也能具有事先添加的事件功能.\n\n把以下代码分别加在上面两段`js`代码后面:\n\n``` js\nvar oLi = document.createElement('li');\noLi.createTextNode('5');\noUl.appendChild(oLi);\n```\n该段代码动态创建一个`<li>5</li>`加在最后面,在上面两个事件添加的情况下分别测试,传统循环添加的是不会有该事件的,但是通过事件委托的方式添加事件有该事件,能够`alert(5)`.\n\n## jQuery事件委托添加\n\n方式1: \n```js\n// live这个方法在1.8左右以后的版本貌似已经被抛弃了\n$('#ul li').live('click',function(){\n  alert($(this).html());\n});\n```\n\n方式2:\n``` js\n$('#ul').on('click','li',function(){\n  alert($(this).html());\n});\n```","slug":"js-event-delegate","published":1,"updated":"2015-08-08T06:59:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cid5tpxaq000dthze2uak7wj3"},{"title":"JS位运算的巧妙运用","date":"2015-08-10T11:11:56.000Z","keywords":["js","javascript","代码优化","位运算"],"_content":"位运算,对于底层的`C`,`C++`开发人员来说并不陌生,但是对于`js`这门弱语言来说,位运算总感觉是那么高深.那么我们为什么还要用位运算呢?\n\n首先,编程语言都是通过机器语言,汇编语言,C,C++,Java等这样一层一层封装出来的,每次封装对于开发人员来说代码的阅读性更好了,但是计算机在\"阅读\"这些代码的时候还是会一级一级的转换回去才能执行这些指令,所以我们越容易读懂的代码,计算机的执行效率就越低.尽管科技越来越发达,硬件方面的技术很强,但是这些小小的优化并不是杯水车薪.\n其次,可以装逼.在一些小菜鸟面前用这些他们看不懂的代码,很装逼,有木有.\n\n<!--more-->\n\n具体的位运算涉及到二进制转换,原码,反码,补码等知识,就不一一罗列,而且在`js`中用处很小,只需要了解运用下面几点东西就OK了.\n\n### 1. 奇偶性判断------按位与(&)\n\n按位与运算是把两个操作数转换成二进制再逐位比较,相同其结果为1,否则为0.而所有数字转化为二进制的奇偶性就只用看末尾,奇数尾数为1,偶数尾数为0.所以:\n\n``` js\nif ( a & 1 ) {\n  alert( 'a是奇数!' );\n} else {  \n  alert ( 'a是偶数!' )\n}\n```\n\n### 2. 两个整数的互换------按位异或(^)\n\n加减互为逆运算,异或和异或互为逆运算.\n\n利用加减:\n``` js\nvar a = 1;\nvar b = 2;\na = a + b;\nb = a - b;\na = a - b;\nconsole.log(a,b)\n```\n\n按位异或:\n``` js\nvar a = 1;\nvar b = 2;\na = a ^ b;\nb = a ^ b;\na = a ^ b;\nconsole.log(a,b);\n```\n\n两个整数互换可以申明第三个中间变量进行临时存储实现,但是声明变量会占用内存,不友好.而加减又没有位运算效率高.\n\n### 3. -1的判断------按位取反(~)\n\n判断一个数是否为-1是我们经常遇到的,`indexOf()`在查找字符串的时候没有找到会返回-1,很多程序,插件,框架错误状态值默认返回-1,前后端分离`ajax`请求有误的时候返回-1(这个一般是一个项目中统一规定,当然也有返回0的,我们这里不做讨论).在位运算中,**`~-1===0`**的.\n``` js\n// 以前\nif ( str.indexOf('a') != -1 ) {\n  alert('a在字符串str中');\n}\n\n// 现在\nif ( ~str.indexOf('a') ) {\n  alert('a在字符串str中');\n}\n```\n\n``` js\n// 以前\n$.get(url, data, function(data) {\n  if( data.status != -1 ) {\n    // 数据正常处理\n  } else {\n    // 数据有误处理\n  }\n});\n\n//现在\n$.get(url, data, function(data) {\n  if( ~data.status ) {\n    // 数据正常处理\n  } else {\n    // 数据有误处理\n  }\n});\n```\n\n### 4. 非负数取整------无符号右移(>>>)\n\n很多时候我们遇到正整数去掉(注意,不是四舍五入)小数点,一般会用到`Math.floor()`;\n``` js\n// 以前\nMath.floor(3.52);  // 结果 3\n\n// 现在\n3.53 >>> 0;  // 结果 3\n```\n\n### 5. 取中间一位数------无符号右移(>>>)\n\n很多时候我们会遇到取中间一位数,偶数就取中间偏左一位.如: 在一列翻页页码标签中,活跃的(active)始终在中间,要取得中间一位是第几位.(总共5个则第取3个,总共8个则取第4个).\n\n``` js\n// 以前 \nif ( totalPages是偶数 ) {\n  alert( '中间一位是第' + totalPage/2 +'位' );\n} else {\n  alert( '中间一位是第' + (totalPage + 1)/2 +'位' );\n}\n\n// 现在\nalert( '中间一位是第' + ( totalPage >>> 1 ) +'位' );\n```\n总之,还有很多位运算方面技巧性的代码写法,有兴趣可以取研究研究.\n\n**PS:位运算只针对于非NaN的Number数据类型,对于非Number数据会被强制隐式转换成数字0再进行计算,同时位运算的优先级很低,注意需要加上括号增加优先级**","source":"_posts/js-bit-operation.md","raw":"title: JS位运算的巧妙运用\ndate: 2015-08-10 19:11:56\ntags: [js,位运算,代码优化]\ncategories: [javascript,代码优化]\nkeywords: [js,javascript,代码优化,位运算]\n---\n位运算,对于底层的`C`,`C++`开发人员来说并不陌生,但是对于`js`这门弱语言来说,位运算总感觉是那么高深.那么我们为什么还要用位运算呢?\n\n首先,编程语言都是通过机器语言,汇编语言,C,C++,Java等这样一层一层封装出来的,每次封装对于开发人员来说代码的阅读性更好了,但是计算机在\"阅读\"这些代码的时候还是会一级一级的转换回去才能执行这些指令,所以我们越容易读懂的代码,计算机的执行效率就越低.尽管科技越来越发达,硬件方面的技术很强,但是这些小小的优化并不是杯水车薪.\n其次,可以装逼.在一些小菜鸟面前用这些他们看不懂的代码,很装逼,有木有.\n\n<!--more-->\n\n具体的位运算涉及到二进制转换,原码,反码,补码等知识,就不一一罗列,而且在`js`中用处很小,只需要了解运用下面几点东西就OK了.\n\n### 1. 奇偶性判断------按位与(&)\n\n按位与运算是把两个操作数转换成二进制再逐位比较,相同其结果为1,否则为0.而所有数字转化为二进制的奇偶性就只用看末尾,奇数尾数为1,偶数尾数为0.所以:\n\n``` js\nif ( a & 1 ) {\n  alert( 'a是奇数!' );\n} else {  \n  alert ( 'a是偶数!' )\n}\n```\n\n### 2. 两个整数的互换------按位异或(^)\n\n加减互为逆运算,异或和异或互为逆运算.\n\n利用加减:\n``` js\nvar a = 1;\nvar b = 2;\na = a + b;\nb = a - b;\na = a - b;\nconsole.log(a,b)\n```\n\n按位异或:\n``` js\nvar a = 1;\nvar b = 2;\na = a ^ b;\nb = a ^ b;\na = a ^ b;\nconsole.log(a,b);\n```\n\n两个整数互换可以申明第三个中间变量进行临时存储实现,但是声明变量会占用内存,不友好.而加减又没有位运算效率高.\n\n### 3. -1的判断------按位取反(~)\n\n判断一个数是否为-1是我们经常遇到的,`indexOf()`在查找字符串的时候没有找到会返回-1,很多程序,插件,框架错误状态值默认返回-1,前后端分离`ajax`请求有误的时候返回-1(这个一般是一个项目中统一规定,当然也有返回0的,我们这里不做讨论).在位运算中,**`~-1===0`**的.\n``` js\n// 以前\nif ( str.indexOf('a') != -1 ) {\n  alert('a在字符串str中');\n}\n\n// 现在\nif ( ~str.indexOf('a') ) {\n  alert('a在字符串str中');\n}\n```\n\n``` js\n// 以前\n$.get(url, data, function(data) {\n  if( data.status != -1 ) {\n    // 数据正常处理\n  } else {\n    // 数据有误处理\n  }\n});\n\n//现在\n$.get(url, data, function(data) {\n  if( ~data.status ) {\n    // 数据正常处理\n  } else {\n    // 数据有误处理\n  }\n});\n```\n\n### 4. 非负数取整------无符号右移(>>>)\n\n很多时候我们遇到正整数去掉(注意,不是四舍五入)小数点,一般会用到`Math.floor()`;\n``` js\n// 以前\nMath.floor(3.52);  // 结果 3\n\n// 现在\n3.53 >>> 0;  // 结果 3\n```\n\n### 5. 取中间一位数------无符号右移(>>>)\n\n很多时候我们会遇到取中间一位数,偶数就取中间偏左一位.如: 在一列翻页页码标签中,活跃的(active)始终在中间,要取得中间一位是第几位.(总共5个则第取3个,总共8个则取第4个).\n\n``` js\n// 以前 \nif ( totalPages是偶数 ) {\n  alert( '中间一位是第' + totalPage/2 +'位' );\n} else {\n  alert( '中间一位是第' + (totalPage + 1)/2 +'位' );\n}\n\n// 现在\nalert( '中间一位是第' + ( totalPage >>> 1 ) +'位' );\n```\n总之,还有很多位运算方面技巧性的代码写法,有兴趣可以取研究研究.\n\n**PS:位运算只针对于非NaN的Number数据类型,对于非Number数据会被强制隐式转换成数字0再进行计算,同时位运算的优先级很低,注意需要加上括号增加优先级**","slug":"js-bit-operation","published":1,"updated":"2015-08-10T12:58:15.000Z","_id":"cid5tpxav000kthze2tg8gapc","comments":1,"layout":"post","photos":[],"link":""},{"title":"HTML你用hash(#!)值弥补ajax局部刷新加载的不足","date":"2015-08-08T07:02:33.000Z","keywords":"html,hash,ajax,#!,url,局部刷新,书签,历史记录","_content":"\n自`ajax`的崛起，`web`页面大部分数据的更新都只是进行局部的数据刷新而不再是以前那种整个页面的刷新，尤其是在移动端,大多数`web`页面都采用单页面利用`ajax`减少对服务器的请求.但是这产生了一个缺陷，那就是`ajax`局部刷新浏览器不会产生历史记录，用户无法进行前进后退访问历史记录，同样，用户也无法存储书签，因为url地址完全没变，存下来的书签只是网页首页，里面的数据不会跟着刷新的。还有一点就是,不便于进行`SEO`.\n\n在进入主题之前我们想来了解一下`html`中的地址对象------`location`.\n<!--more-->\n\n## href------url\n\n一个网页总有一个地址，也就是`url`链接，利用`location`对象的`href`属性可以得到或者修改这个地址。\n\n得到浏览器中地址栏完整的字符串:\n``` js\nconsole.log(location.href);\n```\n\n当然,你也可以修改这个值来达到网页的重定向:\n``` js\nlocation.href = 'blog.tenfour.cn';\n```\n\n## search------参数\n\n经常我们会看到一个地址后面跟着一个?后面还有一长串东西,如下:\n```\nblog.tenfour.cn?name=tenfou&age=100&sex=M\n```\n这个玩意有几个用处:\n\n1. 页面传递给后台的参数\n2. 页面传递给另一个页面的参数\n3. 版本控制或者避免浏览器缓存\n\n具体与本章无关,就不多说.\n\n## hash------锚点\n在本页面不同点跳转:\n```html\n// 页面顶部预设一个锚点,浏览器差异,最好把id和name都设置一样的值\n<a name=\"top\" id=\"top\"></a>\n//...省略N行代码\n<a href=\"#top\">点击返回顶部</a>\n```\n当然,不同页面也可以跳转:\n``` html\n// download.html 下载页面\n\n// ... 前面省略N行广告代码\n<a name=\"download\" id=\"download\"></a>\n<a href=\"aa\">南方电信</a>\n<a href=\"bb\">北方网通</a>\n\n// 另外一个页面\n<a href=\"download.html#download\">点击前往下载</a>\n```\n#后面的值就叫`hash`值,可以通过`location.hash`获取或者改变.\n\n试过上面几个例子的或许会发现，只要当地址改变，无论是页面(href)、参数(search)、锚点(hash)改变，浏览器都会产生记录。我们可以利用这这个来实现ajax局部刷新让浏览器生成历史记录。局部刷新也就是说页面不会刷新，地址改变或者参数改变都会刷新页面，所以我们只有利用锚点(hash)来实现。\n锚点跳转不会刷新页面,但是会产生浏览器记录,我们可以你用这点来解决前面提到的浏览器ajax局部刷新无浏览器记录的缺陷.\n\n## window.onhashchange\n高版本的浏览器有一个事件`window.onhashchange`可以监听浏览器当前页面的`hash`值,当`hash`值改变的时候会执行该事件函数.\n\n```html\n<a href=\"#hash1\">hash1</a>\n<a href=\"#hash2\">hash2</a>\n<a href=\"#hash3\">hash3</a>\n<script>\n  window.onhashchange = function(){\n    alert(location.hash);\n  }\n</script>\n//可以发现每次点击一个hash都改变了，都执行了hashchange函数的。\n\n```\n\n下面我们就来模拟一个ajax局部刷新产生浏览器记录的方法：点击导航，局部刷新content类容，并且产生浏览器历史记录:\n``` html\n<ul class=\"nav\">\n  <li>\n    <a href=\"#home\">首页</a>\n    <a href=\"#contat\">联系我们</a>\n    <a href=\"#about\">关于我们</a>\n  </li>\n</ul>\n\n<div class=\"content\">\n  <!-- 内容区域 -->\n</div>\n<script>\n//点击主页的局部刷新\nfunction loadHome(){\n  $('.content').html('主页内容');\n}\n\n//点击主页的局部刷新\nfunction loadContact(){\n  $('.content').html('联系我们内容');\n}\n\n//点击主页的局部刷新\nfunction loadAbout(){\n  $('.content').html('关于我们内容');\n}\n\nwindow.onhashchange = function(){\n  switch(location.hash){\n    case '#home' : loadHome(); break;\n    case '#contat' : loadContact(); break;\n    case '#about' : loadAbout(); break;\n  }\n}\n</script>\n```\nOK，这样就可以产生浏览器历史记录了，可以试试，但是还有一点没有解决，那就是书签，你直接复制一个输入到地址栏回车，还是首页，这事因为首次输入并没有触发onhashchange事件，所以我们还要加一段话：\n``` js\nswitch(location.hash){\n  case '#home' : loadHome(); break;\n  case '#contat' : loadContact(); break;\n  case '#about' : loadAbout(); break;\n}\n```\n这样页面一加载就会执行一次。所以存储书签也能实现了.\n\n## url中的#!\n\n既然锚点`(#hash)`能解决，那#!又是什么呢？\n要理解这个就要熟悉`seo`，搜索引擎优化，对于锚点改变的连接对于搜索引擎来说，只是一个连接.例如：`tenfour.cn#nodejs和tenfour.cn#express`对于搜索引擎来说，会忽略掉后面的`hash`值，只会记录`tenfour.cn`一条记录。前不久，谷歌等部分浏览器产生了一条新的“潜规则”，对于#!这类的hash值不会被忽略掉，搜索引擎会进行抓取并生成记录。所以一般我们ajax局部刷新的hash会写成:\n``` html\n<ul class=\"nav\">  \n  <li>\n    <a href=\"#!/home\">首页</a>\n    <a href=\"#!/contat\">联系我们</a>\n    <a href=\"#!/about\">关于我们</a>\n  </li>\n</ul>\n<!-- 当然，js处理判断里面也要把这个加进去，location.hash获取的是#后面的所有类容(包括#) -->\n```\n\n## 兼容性处理\n对于低版本不支持`onhashchange`的浏览器可以用计时器无限刷新判断或利用`iframe`,`location.hash`这个是所有浏览器都支持的(包括IE6)，所以只需要解决`onhashchange`的兼容就ok了，这个解决方法自己研究，我要LOL去了。","source":"_posts/html-hashtag.md","raw":"title: HTML你用hash(#!)值弥补ajax局部刷新加载的不足\ndate: 2015-08-08 15:02:33\ntags: [html,hash,ajax]\ncategories: [html/html5,url]\nkeywords: html,hash,ajax,#!,url,局部刷新,书签,历史记录\n---\n\n自`ajax`的崛起，`web`页面大部分数据的更新都只是进行局部的数据刷新而不再是以前那种整个页面的刷新，尤其是在移动端,大多数`web`页面都采用单页面利用`ajax`减少对服务器的请求.但是这产生了一个缺陷，那就是`ajax`局部刷新浏览器不会产生历史记录，用户无法进行前进后退访问历史记录，同样，用户也无法存储书签，因为url地址完全没变，存下来的书签只是网页首页，里面的数据不会跟着刷新的。还有一点就是,不便于进行`SEO`.\n\n在进入主题之前我们想来了解一下`html`中的地址对象------`location`.\n<!--more-->\n\n## href------url\n\n一个网页总有一个地址，也就是`url`链接，利用`location`对象的`href`属性可以得到或者修改这个地址。\n\n得到浏览器中地址栏完整的字符串:\n``` js\nconsole.log(location.href);\n```\n\n当然,你也可以修改这个值来达到网页的重定向:\n``` js\nlocation.href = 'blog.tenfour.cn';\n```\n\n## search------参数\n\n经常我们会看到一个地址后面跟着一个?后面还有一长串东西,如下:\n```\nblog.tenfour.cn?name=tenfou&age=100&sex=M\n```\n这个玩意有几个用处:\n\n1. 页面传递给后台的参数\n2. 页面传递给另一个页面的参数\n3. 版本控制或者避免浏览器缓存\n\n具体与本章无关,就不多说.\n\n## hash------锚点\n在本页面不同点跳转:\n```html\n// 页面顶部预设一个锚点,浏览器差异,最好把id和name都设置一样的值\n<a name=\"top\" id=\"top\"></a>\n//...省略N行代码\n<a href=\"#top\">点击返回顶部</a>\n```\n当然,不同页面也可以跳转:\n``` html\n// download.html 下载页面\n\n// ... 前面省略N行广告代码\n<a name=\"download\" id=\"download\"></a>\n<a href=\"aa\">南方电信</a>\n<a href=\"bb\">北方网通</a>\n\n// 另外一个页面\n<a href=\"download.html#download\">点击前往下载</a>\n```\n#后面的值就叫`hash`值,可以通过`location.hash`获取或者改变.\n\n试过上面几个例子的或许会发现，只要当地址改变，无论是页面(href)、参数(search)、锚点(hash)改变，浏览器都会产生记录。我们可以利用这这个来实现ajax局部刷新让浏览器生成历史记录。局部刷新也就是说页面不会刷新，地址改变或者参数改变都会刷新页面，所以我们只有利用锚点(hash)来实现。\n锚点跳转不会刷新页面,但是会产生浏览器记录,我们可以你用这点来解决前面提到的浏览器ajax局部刷新无浏览器记录的缺陷.\n\n## window.onhashchange\n高版本的浏览器有一个事件`window.onhashchange`可以监听浏览器当前页面的`hash`值,当`hash`值改变的时候会执行该事件函数.\n\n```html\n<a href=\"#hash1\">hash1</a>\n<a href=\"#hash2\">hash2</a>\n<a href=\"#hash3\">hash3</a>\n<script>\n  window.onhashchange = function(){\n    alert(location.hash);\n  }\n</script>\n//可以发现每次点击一个hash都改变了，都执行了hashchange函数的。\n\n```\n\n下面我们就来模拟一个ajax局部刷新产生浏览器记录的方法：点击导航，局部刷新content类容，并且产生浏览器历史记录:\n``` html\n<ul class=\"nav\">\n  <li>\n    <a href=\"#home\">首页</a>\n    <a href=\"#contat\">联系我们</a>\n    <a href=\"#about\">关于我们</a>\n  </li>\n</ul>\n\n<div class=\"content\">\n  <!-- 内容区域 -->\n</div>\n<script>\n//点击主页的局部刷新\nfunction loadHome(){\n  $('.content').html('主页内容');\n}\n\n//点击主页的局部刷新\nfunction loadContact(){\n  $('.content').html('联系我们内容');\n}\n\n//点击主页的局部刷新\nfunction loadAbout(){\n  $('.content').html('关于我们内容');\n}\n\nwindow.onhashchange = function(){\n  switch(location.hash){\n    case '#home' : loadHome(); break;\n    case '#contat' : loadContact(); break;\n    case '#about' : loadAbout(); break;\n  }\n}\n</script>\n```\nOK，这样就可以产生浏览器历史记录了，可以试试，但是还有一点没有解决，那就是书签，你直接复制一个输入到地址栏回车，还是首页，这事因为首次输入并没有触发onhashchange事件，所以我们还要加一段话：\n``` js\nswitch(location.hash){\n  case '#home' : loadHome(); break;\n  case '#contat' : loadContact(); break;\n  case '#about' : loadAbout(); break;\n}\n```\n这样页面一加载就会执行一次。所以存储书签也能实现了.\n\n## url中的#!\n\n既然锚点`(#hash)`能解决，那#!又是什么呢？\n要理解这个就要熟悉`seo`，搜索引擎优化，对于锚点改变的连接对于搜索引擎来说，只是一个连接.例如：`tenfour.cn#nodejs和tenfour.cn#express`对于搜索引擎来说，会忽略掉后面的`hash`值，只会记录`tenfour.cn`一条记录。前不久，谷歌等部分浏览器产生了一条新的“潜规则”，对于#!这类的hash值不会被忽略掉，搜索引擎会进行抓取并生成记录。所以一般我们ajax局部刷新的hash会写成:\n``` html\n<ul class=\"nav\">  \n  <li>\n    <a href=\"#!/home\">首页</a>\n    <a href=\"#!/contat\">联系我们</a>\n    <a href=\"#!/about\">关于我们</a>\n  </li>\n</ul>\n<!-- 当然，js处理判断里面也要把这个加进去，location.hash获取的是#后面的所有类容(包括#) -->\n```\n\n## 兼容性处理\n对于低版本不支持`onhashchange`的浏览器可以用计时器无限刷新判断或利用`iframe`,`location.hash`这个是所有浏览器都支持的(包括IE6)，所以只需要解决`onhashchange`的兼容就ok了，这个解决方法自己研究，我要LOL去了。","slug":"html-hashtag","published":1,"updated":"2015-08-08T07:40:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cid5tpxay000rthzedsb8x2h3"},{"title":"IE rgba兼容问题","date":"2015-08-08T04:06:17.000Z","keywords":"css,ie,兼容性,rgba,透明度","_content":"\n`CSS`透明度设置有`opacity`,`IE`有滤镜`filter:alpha()`,那`rgba`也是设置透明度的,有什么用呢?\n\n`opacity`,`IE`的`filter:alpha()`透明度设置会让子元素继承其透明度,但是在实际项目中中,往往更多的是不想要其透明度被继承.当然,这个可以通过用定位而不直接写在透明元素里面解决透明度继承问题,但是定位始终不是一个好的布局方式.\n\n**非`IE`浏览器**可以设计背景色用`rgba(R,G,B,A)`,其中R,G,B分别是0-255数字或者用百分比表示，A是0-1的数字，0表示全透明，1表示正常显示.但是人神共愤的`IE`并不支持这玩意.不过`IE`也有它可爱的一面------滤镜.\n\n<!--more-->\n\n``` css\nfilter:progid:DXImageTransform.Microsoft.gradient(startcolorstr=#AARRGGBB,endcolorstr=#AARRGGBB)\n```\n这本身是一个`IE`渐变的滤镜.不过我们把渐变的`startcolorstr`和`endcolorstr`设置为一样的,那就不存在渐变的效果了.其中`RRGGBB`是(0-255)十六进制的RGB值,但是透明度`AA`也是(0-255)十六进制,所以需要转换以下,比如0.5的透明度需要转换为255*0.5取整再转换为十六进制.","source":"_posts/css-ie-rgba.md","raw":"title: IE rgba兼容问题\ndate: 2015-08-08 12:06:17\ntags: [css,ie,兼容性,rgba,透明度]\ncategories: [css/css3,兼容性]\nkeywords: css,ie,兼容性,rgba,透明度\n---\n\n`CSS`透明度设置有`opacity`,`IE`有滤镜`filter:alpha()`,那`rgba`也是设置透明度的,有什么用呢?\n\n`opacity`,`IE`的`filter:alpha()`透明度设置会让子元素继承其透明度,但是在实际项目中中,往往更多的是不想要其透明度被继承.当然,这个可以通过用定位而不直接写在透明元素里面解决透明度继承问题,但是定位始终不是一个好的布局方式.\n\n**非`IE`浏览器**可以设计背景色用`rgba(R,G,B,A)`,其中R,G,B分别是0-255数字或者用百分比表示，A是0-1的数字，0表示全透明，1表示正常显示.但是人神共愤的`IE`并不支持这玩意.不过`IE`也有它可爱的一面------滤镜.\n\n<!--more-->\n\n``` css\nfilter:progid:DXImageTransform.Microsoft.gradient(startcolorstr=#AARRGGBB,endcolorstr=#AARRGGBB)\n```\n这本身是一个`IE`渐变的滤镜.不过我们把渐变的`startcolorstr`和`endcolorstr`设置为一样的,那就不存在渐变的效果了.其中`RRGGBB`是(0-255)十六进制的RGB值,但是透明度`AA`也是(0-255)十六进制,所以需要转换以下,比如0.5的透明度需要转换为255*0.5取整再转换为十六进制.","slug":"css-ie-rgba","published":1,"updated":"2015-08-08T06:58:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cid5tpxb90012thzeb7de9163"}],"PostAsset":[],"PostCategory":[{"post_id":"cid5tpx9p0000thzei8o8twpm","category_id":"cid5tpx9u0001thze9hl6ctfy","_id":"cid5tpx9z0006thzeykjlmnvh"},{"post_id":"cid5tpx9p0000thzei8o8twpm","category_id":"cid5tpx9w0004thzekbp4jk07","_id":"cid5tpxa00007thzepbnvyduh"},{"post_id":"cid5tpxaq000dthze2uak7wj3","category_id":"cid5tpx9u0001thze9hl6ctfy","_id":"cid5tpxat000ethzeqmilniql"},{"post_id":"cid5tpxaq000dthze2uak7wj3","category_id":"cid5tpx9w0004thzekbp4jk07","_id":"cid5tpxat000gthze35bmva3r"},{"post_id":"cid5tpxay000rthzedsb8x2h3","category_id":"cid5tpxay000sthze0uy1c49o","_id":"cid5tpxb0000xthzebx99ai0f"},{"post_id":"cid5tpxay000rthzedsb8x2h3","category_id":"cid5tpxaz000vthzeqooa8zsz","_id":"cid5tpxb0000ythzet64wgptm"},{"post_id":"cid5tpxb90012thzeb7de9163","category_id":"cid5tpxba0013thzescgtxs5p","_id":"cid5tpxbd0018thzeesqqgl49"},{"post_id":"cid5tpxb90012thzeb7de9163","category_id":"cid5tpxbc0016thzewlmol796","_id":"cid5tpxbd0019thze78a80aed"},{"post_id":"cid5tpxav000kthze2tg8gapc","category_id":"cid5tpx9u0001thze9hl6ctfy","_id":"cid5xd5rp004tthzeb16rwkla"},{"post_id":"cid5tpxav000kthze2tg8gapc","category_id":"cid5tpx9w0004thzekbp4jk07","_id":"cid5xd5rq004uthzey1pvb8qo"}],"PostTag":[{"post_id":"cid5tpx9p0000thzei8o8twpm","tag_id":"cid5tpx9u0002thze5dg9jy8v","_id":"cid5tpxa10009thzecuq0ysac"},{"post_id":"cid5tpx9p0000thzei8o8twpm","tag_id":"cid5tpx9w0003thzex9fa7u1a","_id":"cid5tpxa1000athzembivfuhu"},{"post_id":"cid5tpx9p0000thzei8o8twpm","tag_id":"cid5tpx9y0005thzeabedgol0","_id":"cid5tpxa2000bthzeoln78ynz"},{"post_id":"cid5tpx9p0000thzei8o8twpm","tag_id":"cid5tpxa00008thze6b1d5wqd","_id":"cid5tpxa2000cthzehaqyieqd"},{"post_id":"cid5tpxaq000dthze2uak7wj3","tag_id":"cid5tpx9u0002thze5dg9jy8v","_id":"cid5tpxat000hthzedbau3gef"},{"post_id":"cid5tpxaq000dthze2uak7wj3","tag_id":"cid5tpx9w0003thzex9fa7u1a","_id":"cid5tpxat000ithzewl2xuvkd"},{"post_id":"cid5tpxaq000dthze2uak7wj3","tag_id":"cid5tpxat000fthzelut2qvue","_id":"cid5tpxat000jthzenubyb5ag"},{"post_id":"cid5tpxav000kthze2tg8gapc","tag_id":"cid5tpx9u0002thze5dg9jy8v","_id":"cid5tpxaw000othzeckyim8mo"},{"post_id":"cid5tpxav000kthze2tg8gapc","tag_id":"cid5tpxaw000mthze7f5ju7zq","_id":"cid5tpxaw000pthzek5opw4ha"},{"post_id":"cid5tpxav000kthze2tg8gapc","tag_id":"cid5tpx9w0003thzex9fa7u1a","_id":"cid5tpxaw000qthzerwf9zogj"},{"post_id":"cid5tpxay000rthzedsb8x2h3","tag_id":"cid5tpxaz000tthze510t62hb","_id":"cid5tpxb0000zthzee5ulrkse"},{"post_id":"cid5tpxay000rthzedsb8x2h3","tag_id":"cid5tpxaz000uthzehge4yc1t","_id":"cid5tpxb10010thzewj0ornc6"},{"post_id":"cid5tpxay000rthzedsb8x2h3","tag_id":"cid5tpxb0000wthzeo2bii7zn","_id":"cid5tpxb10011thze0i8iafia"},{"post_id":"cid5tpxb90012thzeb7de9163","tag_id":"cid5tpxbb0014thzebu53mxco","_id":"cid5tpxbn001cthzexq5k016n"},{"post_id":"cid5tpxb90012thzeb7de9163","tag_id":"cid5tpxbc0015thze30uvtnzl","_id":"cid5tpxbo001dthzepmjb4sc4"},{"post_id":"cid5tpxb90012thzeb7de9163","tag_id":"cid5tpxbd0017thzeqkbjt1q0","_id":"cid5tpxbo001ethzevawltbcp"},{"post_id":"cid5tpxb90012thzeb7de9163","tag_id":"cid5tpxbd001athzefsbt4cqk","_id":"cid5tpxbo001fthzeyf6lvxxo"},{"post_id":"cid5tpxb90012thzeb7de9163","tag_id":"cid5tpxbe001bthzesuhv6tlq","_id":"cid5tpxbo001gthzeleunsub9"}],"Tag":[{"name":"js","_id":"cid5tpx9u0002thze5dg9jy8v"},{"name":"代码优化","_id":"cid5tpx9w0003thzex9fa7u1a"},{"name":"运算符","_id":"cid5tpx9y0005thzeabedgol0"},{"name":"条件选择","_id":"cid5tpxa00008thze6b1d5wqd"},{"name":"事件委托","_id":"cid5tpxat000fthzelut2qvue"},{"name":"位运算","_id":"cid5tpxaw000mthze7f5ju7zq"},{"name":"html","_id":"cid5tpxaz000tthze510t62hb"},{"name":"hash","_id":"cid5tpxaz000uthzehge4yc1t"},{"name":"ajax","_id":"cid5tpxb0000wthzeo2bii7zn"},{"name":"css","_id":"cid5tpxbb0014thzebu53mxco"},{"name":"ie","_id":"cid5tpxbc0015thze30uvtnzl"},{"name":"兼容性","_id":"cid5tpxbd0017thzeqkbjt1q0"},{"name":"rgba","_id":"cid5tpxbd001athzefsbt4cqk"},{"name":"透明度","_id":"cid5tpxbe001bthzesuhv6tlq"}]}}